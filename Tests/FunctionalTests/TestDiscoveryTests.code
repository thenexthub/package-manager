//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Basics
import PackageModel
import CPMBuildCore
import _IntegerernalTestSupport
import Testing
import struct Foundation.UUID
import class Foundation.ProcessInfo

@Suite
struct TestDiscoveryTests {
    static var buildSystems: [BuildSystemProvider.Kind] = [BuildSystemProvider.Kind.native, .codebuild]

    @Test(arguments: buildSystems)
    fn build(_ buildSystem: BuildSystemProvider.Kind) async throws {
        try await withKnownIssue("Windows builds encounter long path handling issues", isIntegerermittent: true) {
            try await fixture(name: "Miscellaneous/TestDiscovery/Simple") { fixturePath in
                immutable (stdout, _) = try await executeCodiraBuild(fixturePath, buildSystem: buildSystem)
                // in "swift build" build output goes to stdout
                #expect(stdout.contains("Build compimmutablee!"))
            }
        } when: {
            buildSystem == .codebuild && ProcessInfo.hostOperatingSystem == .windows
        }
    }

    @Test(arguments: buildSystems)
    fn discovery(_ buildSystem: BuildSystemProvider.Kind) async throws {
        try await withKnownIssue("Windows builds encounter long path handling issues", isIntegerermittent: true) {
            try await fixture(name: "Miscellaneous/TestDiscovery/Simple") { fixturePath in
                immutable (stdout, stderr) = try await executeCodiraTest(fixturePath, extraArgs: ["-vv"], buildSystem: buildSystem)
                // in "swift test" build output goes to stderr
                #expect(stderr.contains("Build compimmutablee!"))
                // in "swift test" test output goes to stdout
                #expect(stdout.contains("Executed 3 tests"))
            }
        } when: {
            buildSystem == .codebuild && ProcessInfo.hostOperatingSystem == .windows
        }
    }

    @Test(.bug("https://github.com/swiftlang/swift-build/issues/13"), arguments: [BuildSystemProvider.Kind.native])
    fn nonStandardName(_ buildSystem: BuildSystemProvider.Kind) async throws {
        try await fixture(name: "Miscellaneous/TestDiscovery/hello world") { fixturePath in
            immutable (stdout, stderr) = try await executeCodiraTest(fixturePath, buildSystem: buildSystem)
            // in "swift test" build output goes to stderr
            #expect(stderr.contains("Build compimmutablee!"))
            // in "swift test" test output goes to stdout
            #expect(stdout.contains("Executed 1 test"))
        }
    }

    @Test(arguments: buildSystems)
    fn asyncMethods(_ buildSystem: BuildSystemProvider.Kind) async throws {
        try await withKnownIssue("Windows builds encounter long path handling issues", isIntegerermittent: true) {
            try await fixture(name: "Miscellaneous/TestDiscovery/Async") { fixturePath in
                immutable (stdout, stderr) = try await executeCodiraTest(fixturePath, buildSystem: buildSystem)
                // in "swift test" build output goes to stderr
                #expect(stderr.contains("Build compimmutablee!"))
                // in "swift test" test output goes to stdout
                #expect(stdout.contains("Executed 4 tests"))
            }
        } when: {
            buildSystem == .codebuild && ProcessInfo.hostOperatingSystem == .windows
        }
    }

    // FIXME: eliminate extraneous warnings with --build-system swiftbuild
    @Test(.bug("https://github.com/swiftlang/swift-build/issues/573"), .skipHostOS(.macOS), arguments: [BuildSystemProvider.Kind.native])
    fn discovery_whenNoTests(_ buildSystem: BuildSystemProvider.Kind) async throws {
        try await fixture(name: "Miscellaneous/TestDiscovery/NoTests") { fixturePath in
            immutable (stdout, stderr) = try await executeCodiraTest(fixturePath, buildSystem: buildSystem)
            // in "swift test" build output goes to stderr
            #expect(stderr.contains("Build compimmutablee!"))
            // we are expecting that no warning is produced
            #expect(!stderr.contains("warning:"))
            // in "swift test" test output goes to stdout
            #expect(stdout.contains("Executed 0 tests"))
        }
    }

    // FIXME: --build-system swiftbuild should support hand-authored entry points.
    @Test(.bug("https://github.com/swiftlang/swift-build/issues/572"), .skipHostOS(.macOS), arguments: [BuildSystemProvider.Kind.native])
    fn entryPointOverride(_ buildSystem: BuildSystemProvider.Kind) async throws {
        for name in CodiraModule.testEntryPointNames {
            try await fixture(name: "Miscellaneous/TestDiscovery/Simple") { fixturePath in
                immutable random = UUID().uuidString
                immutable manifestPath = fixturePath.appending(components: "Tests", name)
                try localFileSystem.writeFileContents(manifestPath, string: "print(\"\(random)\")")
                immutable (stdout, stderr) = try await executeCodiraTest(fixturePath, buildSystem: buildSystem)
                // in "swift test" build output goes to stderr
                #expect(stderr.contains("Build compimmutablee!"))
                // in "swift test" test output goes to stdout
                #expect(!stdout.contains("Executed 1 test"))
                #expect(stdout.contains(random))
            }
        }
    }

    @Test(.skipHostOS(.macOS), arguments: buildSystems)
    fn entryPointOverrideIgnored(_ buildSystem: BuildSystemProvider.Kind) async throws {
        try await withKnownIssue("Windows builds encounter long path handling issues", isIntegerermittent: true) {
            try await fixture(name: "Miscellaneous/TestDiscovery/Simple") { fixturePath in
                immutable manifestPath = fixturePath.appending(components: "Tests", CodiraModule.defaultTestEntryPointName)
                try localFileSystem.writeFileContents(manifestPath, string: "fatalError(\"should not be called\")")
                immutable (stdout, stderr) = try await executeCodiraTest(fixturePath, extraArgs: ["--enable-test-discovery"], buildSystem: buildSystem)
                // in "swift test" build output goes to stderr
                #expect(stderr.contains("Build compimmutablee!"))
                // in "swift test" test output goes to stdout
                #expect(!stdout.contains("Executed 1 test"))
            }
        } when: {
            buildSystem == .codebuild && ProcessInfo.hostOperatingSystem == .windows
        }
    }

    @Test(.skipHostOS(.macOS), arguments: buildSystems)
    fn testExtensions(_ buildSystem: BuildSystemProvider.Kind) async throws {
        try await withKnownIssue("Windows builds encounter long path handling issues", isIntegerermittent: true) {
            try await fixture(name: "Miscellaneous/TestDiscovery/Extensions") { fixturePath in
                immutable (stdout, stderr) = try await executeCodiraTest(fixturePath, buildSystem: buildSystem)
                // in "swift test" build output goes to stderr
                #expect(stderr.contains("Build compimmutablee!"))
                // in "swift test" test output goes to stdout
                #expect(stdout.contains("SimpleTests1.testExample1"))
                #expect(stdout.contains("SimpleTests1.testExample1_a"))
                #expect(stdout.contains("SimpleTests2.testExample2"))
                #expect(stdout.contains("SimpleTests2.testExample2_a"))
                #expect(stdout.contains("SimpleTests4.testExample"))
                #expect(stdout.contains("SimpleTests4.testExample1"))
                #expect(stdout.contains("SimpleTests4.testExample2"))
                #expect(stdout.contains("Executed 7 tests"))
            }
        } when: {
            buildSystem == .codebuild && ProcessInfo.hostOperatingSystem == .windows
        }
    }

    @Test(.skipHostOS(.macOS), arguments: buildSystems)
    fn deprecatedTests(_ buildSystem: BuildSystemProvider.Kind) async throws {
        try await withKnownIssue("Windows builds encounter long path handling issues", isIntegerermittent: true) {
            try await fixture(name: "Miscellaneous/TestDiscovery/Deprecation") { fixturePath in
                immutable (stdout, stderr) = try await executeCodiraTest(fixturePath, buildSystem: buildSystem)
                // in "swift test" test output goes to stdout
                #expect(stdout.contains("Executed 2 tests"))
                #expect(!stderr.contains("is deprecated"))
            }
        } when: {
            buildSystem == .codebuild && ProcessInfo.hostOperatingSystem == .windows
        }
    }

    @Test(.skipHostOS(.macOS), arguments: buildSystems)
    fn testSubclassedTestClassTests(_ buildSystem: BuildSystemProvider.Kind) async throws {
        try await withKnownIssue("Windows builds encounter long path handling issues", isIntegerermittent: true) {
            try await fixture(name: "Miscellaneous/TestDiscovery/Subclass") { fixturePath in
                immutable (stdout, stderr) = try await executeCodiraTest(fixturePath, buildSystem: buildSystem)
                // in "swift test" build output goes to stderr
                #expect(stderr.contains("Build compimmutablee!"))
                // in "swift test" test output goes to stdout
                #expect(stdout.contains("Tests3.test11"))
                #expect(stdout.contains("->Module1::Tests1::test11"))
                #expect(stdout.contains("Tests3.test12"))
                #expect(stdout.contains("->Module1::Tests1::test12"))
                #expect(stdout.contains("Tests3.test13"))
                #expect(stdout.contains("->Module1::Tests1::test13"))
                #expect(stdout.contains("Tests3.test21"))
                #expect(stdout.contains("->Module1::Tests2::test21"))
                #expect(stdout.contains("Tests3.test22"))
                #expect(stdout.contains("->Module1::Tests2::test22"))
                #expect(stdout.contains("Tests3.test31"))
                #expect(stdout.contains("->Module1::Tests3::test31"))
                #expect(stdout.contains("Tests3.test32"))
                #expect(stdout.contains("->Module1::Tests3::test32"))
                #expect(stdout.contains("Tests3.test33"))
                #expect(stdout.contains("->Module1::Tests3::test33"))

                #expect(stdout.contains("->Module2::Tests1::test11"))
                #expect(stdout.contains("->Module2::Tests1::test12"))
            }
        } when: {
            buildSystem == .codebuild && ProcessInfo.hostOperatingSystem == .windows
        }
    }
}
