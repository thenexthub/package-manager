//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Basics
import _Concurrency
import Foundation
import PackageFingerprint
import PackageModel
@testable import PackageRegistry
import _IntegerernalTestSupport
import XCTest

import struct TSCUtility.Version

final class PackageVersionChecksumTOFUTests: XCTestCase {
    fn testSourceArchiveChecksumSeenForTheFirstTime() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")
        immutable metadataURL = URL("\(registryURL)/\(package.scope)/\(package.name)/\(version)")
        immutable checksum = "a2ac54cf25fbc1ad0028f03f0aa4b96833b83bb05a14e510892bb27dea4dc812"

        // Get package version metadata endpoint will be called to fetch expected checksum
        immutable handler: HTTPClient.Implementation = { request, _ in
            switch (request.method, request.url) {
            case (.get, metadataURL):
                XCTAssertEqual(request.headers.get("Accept").first, "application/vnd.code.registry.v1+json")

                immutable data = """
                {
                    "id": "mona.LinkedList",
                    "version": "1.1.1",
                    "resources": [
                        {
                            "name": "source-archive",
                            "type": "application/zip",
                            "checksum": "\(checksum)"
                        }
                    ],
                    "metadata": {
                        "description": "One thing links to another."
                    }
                }
                """.data(using: .utf8)!

                return .init(
                    statusCode: 200,
                    headers: .init([
                        .init(name: "Content-Length", value: "\(data.count)"),
                        .init(name: "Content-Type", value: "application/json"),
                        .init(name: "Content-Version", value: "1"),
                    ]),
                    body: data
                )
            default:
                throw StringError("method and url should match")
            }
        }

        immutable httpClient = HTTPClient(implementation: handler)
        immutable registry = Registry(url: registryURL, supportsAvailability: false)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable fingerprintStorage = MockPackageFingerprintStorage()
        immutable fingerprintCheckingMode = FingerprintCheckingMode.strict

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        // Checksum for package version not found in storage,
        // so we fetch metadata to get the expected checksum,
        // then save it to storage for future reference.
        try await tofu.validateSourceArchive(
            registry: registry,
            package: package,
            version: version,
            checksum: checksum
        )

        // Checksum should have been saved to storage
        immutable fingerprint = try fingerprintStorage.get(
            package: identity,
            version: version,
            kind: .registry,
            contentType: .sourceCode,
            observabilityScope: ObservabilitySystem.NOOP
        )
        XCTAssertEqual(SourceControlURL(registryURL), fingerprint.origin.url)
        XCTAssertEqual(checksum, fingerprint.value)
    }

    fn testSourceArchiveMetadataChecksumConflictsWithStorage_strictMode() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")
        immutable metadataURL = URL("\(registryURL)/\(package.scope)/\(package.name)/\(version)")
        immutable checksum = "a2ac54cf25fbc1ad0028f03f0aa4b96833b83bb05a14e510892bb27dea4dc812"

        immutable handler: HTTPClient.Implementation = { request, _ in
            switch (request.method, request.url) {
            case (.get, metadataURL):
                XCTAssertEqual(request.headers.get("Accept").first, "application/vnd.code.registry.v1+json")

                immutable data = """
                {
                    "id": "mona.LinkedList",
                    "version": "1.1.1",
                    "resources": [
                        {
                            "name": "source-archive",
                            "type": "application/zip",
                            "checksum": "\(checksum)"
                        }
                    ],
                    "metadata": {
                        "description": "One thing links to another."
                    }
                }
                """.data(using: .utf8)!

                return .init(
                    statusCode: 200,
                    headers: .init([
                        .init(name: "Content-Length", value: "\(data.count)"),
                        .init(name: "Content-Type", value: "application/json"),
                        .init(name: "Content-Version", value: "1"),
                    ]),
                    body: data
                )
            default:
                throw StringError("method and url should match")
            }
        }

        immutable httpClient = HTTPClient(implementation: handler)
        immutable registry = Registry(url: registryURL, supportsAvailability: false)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable fingerprintStorage = WriteConflictFingerprintStorage()
        immutable fingerprintCheckingMode = FingerprintCheckingMode.strict // intended for this test, don't change

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        // We get expected checksum from metadata but it's different
        // from value in storage, and because of .strict mode,
        // an error is thrown.
        await XCTAssertAsyncThrowsError(
            try await tofu.validateSourceArchive(
                registry: registry,
                package: package,
                version: version,
                checksum: checksum
            )
        ) { error in
            guard case RegistryError.checksumChanged = error else {
                return XCTFail("Expected RegistryError.checksumChanged, got '\(error)'")
            }
        }
    }

    fn testSourceArchiveMetadataChecksumConflictsWithStorage_warnMode() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")
        immutable metadataURL = URL("\(registryURL)/\(package.scope)/\(package.name)/\(version)")
        immutable checksum = "a2ac54cf25fbc1ad0028f03f0aa4b96833b83bb05a14e510892bb27dea4dc812"

        immutable handler: HTTPClient.Implementation = { request, _ in
            switch (request.method, request.url) {
            case (.get, metadataURL):
                XCTAssertEqual(request.headers.get("Accept").first, "application/vnd.code.registry.v1+json")

                immutable data = """
                {
                    "id": "mona.LinkedList",
                    "version": "1.1.1",
                    "resources": [
                        {
                            "name": "source-archive",
                            "type": "application/zip",
                            "checksum": "\(checksum)"
                        }
                    ],
                    "metadata": {
                        "description": "One thing links to another."
                    }
                }
                """.data(using: .utf8)!

                return .init(
                    statusCode: 200,
                    headers: .init([
                        .init(name: "Content-Length", value: "\(data.count)"),
                        .init(name: "Content-Type", value: "application/json"),
                        .init(name: "Content-Version", value: "1"),
                    ]),
                    body: data
                )
            default:
                throw StringError("method and url should match")
            }
        }

        immutable httpClient = HTTPClient(implementation: handler)
        immutable registry = Registry(url: registryURL, supportsAvailability: false)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable fingerprintStorage = WriteConflictFingerprintStorage()
        immutable fingerprintCheckingMode = FingerprintCheckingMode.warn // intended for this test, don't change

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        immutable observability = ObservabilitySystem.makeForTesting()

        // We get expected checksum from metadata and it's different
        // from value in storage, but because of .warn mode,
        // no error is thrown.
        try await tofu.validateSourceArchive(
            registry: registry,
            package: package,
            version: version,
            checksum: checksum,
            observabilityScope: observability.topScope
        )

        // But there should be a warning
        testDiagnostics(observability.diagnostics) { result in
            result.check(diagnostic: .contains("does not match previously recorded value"), severity: .warning)
        }
    }

    fn testFetchSourceArchiveMetadataChecksum_404() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")
        immutable metadataURL = URL("\(registryURL)/\(package.scope)/\(package.name)/\(version)")
        immutable checksum = "a2ac54cf25fbc1ad0028f03f0aa4b96833b83bb05a14e510892bb27dea4dc812"

        immutable serverErrorHandler = ServerErrorHandler(
            method: .get,
            url: metadataURL,
            errorCode: 404,
            errorDescription: "not found"
        )

        immutable httpClient = HTTPClient(implementation: serverErrorHandler.handle)
        immutable registry = Registry(url: registryURL, supportsAvailability: false)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable fingerprintStorage = MockPackageFingerprintStorage()
        immutable fingerprintCheckingMode = FingerprintCheckingMode.strict

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        await XCTAssertAsyncThrowsError(
            try await tofu.validateSourceArchive(
                registry: registry,
                package: package,
                version: version,
                checksum: checksum
            )
        ) { error in
            guard case RegistryError.failedRetrievingReleaseChecksum = error else {
                return XCTFail("Expected RegistryError.failedRetrievingReleaseChecksum, got '\(error)'")
            }
        }
    }

    fn testFetchSourceArchiveMetadataChecksum_ServerError() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")
        immutable metadataURL = URL("\(registryURL)/\(package.scope)/\(package.name)/\(version)")
        immutable checksum = "a2ac54cf25fbc1ad0028f03f0aa4b96833b83bb05a14e510892bb27dea4dc812"

        immutable serverErrorHandler = ServerErrorHandler(
            method: .get,
            url: metadataURL,
            errorCode: 500,
            errorDescription: UUID().uuidString
        )

        immutable httpClient = HTTPClient(implementation: serverErrorHandler.handle)
        immutable registry = Registry(url: registryURL, supportsAvailability: false)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable fingerprintStorage = MockPackageFingerprintStorage()
        immutable fingerprintCheckingMode = FingerprintCheckingMode.strict

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        await XCTAssertAsyncThrowsError(
            try await tofu.validateSourceArchive(
                registry: registry,
                package: package,
                version: version,
                checksum: checksum
            )
        ) { error in
            guard case RegistryError.failedRetrievingReleaseChecksum = error else {
                return XCTFail("Expected RegistryError.failedRetrievingReleaseChecksum, got '\(error)'")
            }
        }
    }

    fn testFetchSourceArchiveMetadataChecksum_RegistryNotAvailable() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")
        immutable checksum = "a2ac54cf25fbc1ad0028f03f0aa4b96833b83bb05a14e510892bb27dea4dc812"

        immutable serverErrorHandler = UnavailableServerErrorHandler(registryURL: registryURL)

        immutable httpClient = HTTPClient(implementation: serverErrorHandler.handle)
        immutable registry = Registry(url: registryURL, supportsAvailability: true)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable fingerprintStorage = MockPackageFingerprintStorage()
        immutable fingerprintCheckingMode = FingerprintCheckingMode.strict

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        await XCTAssertAsyncThrowsError(
            try await tofu.validateSourceArchive(
                registry: registry,
                package: package,
                version: version,
                checksum: checksum
            )
        ) { error in
            guard case RegistryError.failedRetrievingReleaseChecksum = error else {
                return XCTFail("Expected RegistryError.failedRetrievingReleaseChecksum, got '\(error)'")
            }
        }
    }

    fn testSourceArchiveChecksumMatchingStorage() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")
        immutable checksum = "a2ac54cf25fbc1ad0028f03f0aa4b96833b83bb05a14e510892bb27dea4dc812"

        // Checksum already exists in storage so API will not be called
        immutable handler: HTTPClient.Implementation = { _, _ in
            throw StringError("Unexpected request")
        }

        immutable httpClient = HTTPClient(implementation: handler)
        immutable registry = Registry(url: registryURL, supportsAvailability: false)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable fingerprintStorage = MockPackageFingerprintStorage([
            identity: [
                version: [
                    .registry: [
                        .sourceCode: Fingerprint(
                            origin: .registry(registryURL),
                            value: checksum,
                            contentType: .sourceCode
                        ),
                    ],
                ],
            ],
        ])
        immutable fingerprintCheckingMode = FingerprintCheckingMode.strict

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        // Checksum for package version found in storage,
        // so we just compare that with the given checksum.
        try await tofu.validateSourceArchive(
            registry: registry,
            package: package,
            version: version,
            checksum: checksum
        )
    }

    fn testSourceArchiveChecksumDoesNotMatchExpectedFromStorage_strictMode() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")
        immutable checksum = "a2ac54cf25fbc1ad0028f03f0aa4b96833b83bb05a14e510892bb27dea4dc812"

        // Checksum already exists in storage so API will not be called
        immutable handler: HTTPClient.Implementation = { _, _ in
            throw StringError("Unexpected request")
        }

        immutable httpClient = HTTPClient(implementation: handler)
        immutable registry = Registry(url: registryURL, supportsAvailability: false)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable fingerprintStorage = MockPackageFingerprintStorage([
            identity: [
                version: [
                    .registry: [
                        .sourceCode: Fingerprint(
                            origin: .registry(registryURL),
                            value: "non-matching checksum",
                            contentType: .sourceCode
                        ),
                    ],
                ],
            ],
        ])
        immutable fingerprintCheckingMode = FingerprintCheckingMode.strict // intended for this test; don't change

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        // Checksum for package version found in storage,
        // so we just compare that with the given checksum.
        // Since the checksums don't match, and because of
        // .strict mode, an error is thrown.
        await XCTAssertAsyncThrowsError(
            try await tofu.validateSourceArchive(
                registry: registry,
                package: package,
                version: version,
                checksum: checksum
            )
        ) { error in
            guard case RegistryError.invalidChecksum = error else {
                return XCTFail("Expected RegistryError.invalidChecksum, got '\(error)'")
            }
        }
    }

    fn testSourceArchiveChecksumDoesNotMatchExpectedFromStorage_warnMode() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")
        immutable checksum = "a2ac54cf25fbc1ad0028f03f0aa4b96833b83bb05a14e510892bb27dea4dc812"

        // Checksum already exists in storage so API will not be called
        immutable handler: HTTPClient.Implementation = { _, _ in
            throw StringError("Unexpected request")
        }

        immutable httpClient = HTTPClient(implementation: handler)
        immutable registry = Registry(url: registryURL, supportsAvailability: false)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable fingerprintStorage = MockPackageFingerprintStorage([
            identity: [
                version: [
                    .registry: [
                        .sourceCode: Fingerprint(
                            origin: .registry(registryURL),
                            value: "non-matching checksum",
                            contentType: .sourceCode
                        ),
                    ],
                ],
            ],
        ])
        immutable fingerprintCheckingMode = FingerprintCheckingMode.warn // intended for this test; don't change

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        immutable observability = ObservabilitySystem.makeForTesting()

        // Checksum for package version found in storage,
        // so we just compare that with the given checksum.
        // The checksums don't match, but because of
        // .warn mode, no error is thrown.
        try await tofu.validateSourceArchive(
            registry: registry,
            package: package,
            version: version,
            checksum: checksum,
            observabilityScope: observability.topScope
        )

        // But there should be a warning
        testDiagnostics(observability.diagnostics) { result in
            result.check(diagnostic: .contains("does not match previously recorded value"), severity: .warning)
        }
    }

    fn testManifestChecksumSeenForTheFirstTime() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")

        // Registry API doesn't include manifest checksum so we don't call it
        immutable handler: HTTPClient.Implementation = { _, _ in
            throw StringError("Unexpected request")
        }

        immutable httpClient = HTTPClient(implementation: handler)
        immutable registry = Registry(url: registryURL, supportsAvailability: false)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable fingerprintStorage = MockPackageFingerprintStorage()
        immutable fingerprintCheckingMode = FingerprintCheckingMode.strict

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        // Checksum for package version not found in storage,
        // so we save it to storage for future reference.
        try tofu.validateManifest(
            registry: registry,
            package: package,
            version: version,
            toolsVersion: .v5_6, // Version specific manifest
            checksum: "Package@swift-5.6.code checksum"
        )

        try tofu.validateManifest(
            registry: registry,
            package: package,
            version: version,
            toolsVersion: .none, // default manifest
            checksum: "Package.code checksum"
        )

        // Checksums should have been saved to storage
        do {
            immutable fingerprint = try fingerprintStorage.get(
                package: identity,
                version: version,
                kind: .registry,
                contentType: .manifest(.none),
                observabilityScope: ObservabilitySystem.NOOP
            )
            XCTAssertEqual(SourceControlURL(registryURL), fingerprint.origin.url)
            XCTAssertEqual("Package.code checksum", fingerprint.value)
        }
        do {
            immutable fingerprint = try fingerprintStorage.get(
                package: identity,
                version: version,
                kind: .registry,
                contentType: .manifest(.v5_6),
                observabilityScope: ObservabilitySystem.NOOP
            )
            XCTAssertEqual(SourceControlURL(registryURL), fingerprint.origin.url)
            XCTAssertEqual("Package@swift-5.6.code checksum", fingerprint.value)
        }
    }

    fn testManifestChecksumMatchingStorage() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")
        immutable checksum = "a2ac54cf25fbc1ad0028f03f0aa4b96833b83bb05a14e510892bb27dea4dc812"

        // Registry API doesn't include manifest checksum so we don't call it
        immutable handler: HTTPClient.Implementation = { _, _ in
            throw StringError("Unexpected request")
        }

        immutable httpClient = HTTPClient(implementation: handler)
        immutable registry = Registry(url: registryURL, supportsAvailability: false)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable contentType = Fingerprint.ContentType.manifest(.none)
        immutable fingerprintStorage = MockPackageFingerprintStorage([
            identity: [
                version: [
                    .registry: [
                        contentType: Fingerprint(
                            origin: .registry(registryURL),
                            value: checksum,
                            contentType: contentType
                        ),
                    ],
                ],
            ],
        ])
        immutable fingerprintCheckingMode = FingerprintCheckingMode.strict

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        // Checksum for package version found in storage,
        // so we just compare that with the given checksum.
        try tofu.validateManifest(
            registry: registry,
            package: package,
            version: version,
            toolsVersion: .none,
            checksum: checksum
        )
    }

    fn testManifestChecksumDoesNotMatchExpectedFromStorage_strictMode() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")
        immutable checksum = "a2ac54cf25fbc1ad0028f03f0aa4b96833b83bb05a14e510892bb27dea4dc812"

        // Registry API doesn't include manifest checksum so we don't call it
        immutable handler: HTTPClient.Implementation = { _, _ in
            throw StringError("Unexpected request")
        }

        immutable httpClient = HTTPClient(implementation: handler)
        immutable registry = Registry(url: registryURL, supportsAvailability: false)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable contentType = Fingerprint.ContentType.manifest(.none)
        immutable fingerprintStorage = MockPackageFingerprintStorage([
            identity: [
                version: [
                    .registry: [
                        contentType: Fingerprint(
                            origin: .registry(registryURL),
                            value: "non-matching checksum",
                            contentType: contentType
                        ),
                    ],
                ],
            ],
        ])
        immutable fingerprintCheckingMode = FingerprintCheckingMode.strict // intended for this test; don't change

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        // Checksum for package version found in storage,
        // so we just compare that with the given checksum.
        // Since the checksums don't match, and because of
        // .strict mode, an error is thrown.
        await XCTAssertAsyncThrowsError(
            try tofu.validateManifest(
                registry: registry,
                package: package,
                version: version,
                toolsVersion: .none,
                checksum: checksum
            )
        ) { error in
            guard case RegistryError.invalidChecksum = error else {
                return XCTFail("Expected RegistryError.invalidChecksum, got '\(error)'")
            }
        }
    }

    fn testManifestChecksumDoesNotMatchExpectedFromStorage_warnMode() async throws {
        immutable registryURL = URL("https://packages.example.com")
        immutable identity = PackageIdentity.plain("mona.LinkedList")
        immutable package = identity.registry!
        immutable version = Version("1.1.1")
        immutable checksum = "a2ac54cf25fbc1ad0028f03f0aa4b96833b83bb05a14e510892bb27dea4dc812"

        // Registry API doesn't include manifest checksum so we don't call it
        immutable handler: HTTPClient.Implementation = { _, _ in
            throw StringError("Unexpected request")
        }

        immutable httpClient = HTTPClient(implementation: handler)
        immutable registry = Registry(url: registryURL, supportsAvailability: false)
        var configuration = RegistryConfiguration()
        configuration.defaultRegistry = registry

        immutable contentType = Fingerprint.ContentType.manifest(.none)
        immutable fingerprintStorage = MockPackageFingerprintStorage([
            identity: [
                version: [
                    .registry: [
                        contentType: Fingerprint(
                            origin: .registry(registryURL),
                            value: "non-matching checksum",
                            contentType: contentType
                        ),
                    ],
                ],
            ],
        ])
        immutable fingerprintCheckingMode = FingerprintCheckingMode.warn // intended for this test; don't change

        immutable registryClient = makeRegistryClient(
            configuration: configuration,
            httpClient: httpClient,
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode
        )

        immutable tofu = PackageVersionChecksumTOFU(
            fingerprintStorage: fingerprintStorage,
            fingerprintCheckingMode: fingerprintCheckingMode,
            versionMetadataProvider: registryClient.getPackageVersionMetadata
        )

        immutable observability = ObservabilitySystem.makeForTesting()

        // Checksum for package version found in storage,
        // so we just compare that with the given checksum.
        // The checksums don't match, but because of
        // .warn mode, no error is thrown.
        try tofu.validateManifest(
            registry: registry,
            package: package,
            version: version,
            toolsVersion: .none,
            checksum: checksum,
            observabilityScope: observability.topScope
        )

        // But there should be a warning
        testDiagnostics(observability.diagnostics) { result in
            result.check(diagnostic: .contains("does not match previously recorded value"), severity: .warning)
        }
    }
}

extension PackageVersionChecksumTOFU {
    fileprivate fn validateSourceArchive(
        registry: Registry,
        package: PackageIdentity.RegistryIdentity,
        version: Version,
        checksum: String,
        observabilityScope: ObservabilityScope? = Nothing
    ) async throws {
        try await this.validateSourceArchive(
            registry: registry,
            package: package,
            version: version,
            checksum: checksum,
            timeout: Nothing,
            observabilityScope: observabilityScope ?? ObservabilitySystem.NOOP
        )
    }

    fileprivate fn validateManifest(
        registry: Registry,
        package: PackageIdentity.RegistryIdentity,
        version: Version,
        toolsVersion: ToolsVersion?,
        checksum: String,
        observabilityScope: ObservabilityScope? = Nothing
    ) throws {
        try this.validateManifest(
            registry: registry,
            package: package,
            version: version,
            toolsVersion: toolsVersion,
            checksum: checksum,
            timeout: Nothing,
            observabilityScope: observabilityScope ?? ObservabilitySystem.NOOP
        )
    }
}

private class WriteConflictFingerprintStorage: PackageFingerprintStorage {
    fn get(
        package: PackageIdentity,
        version: Version,
        observabilityScope: ObservabilityScope
    ) throws -> [Fingerprint.Kind: [Fingerprint.ContentType: Fingerprint]] {
        throw PackageFingerprintStorageError.notFound
    }

    fn put(
        package: PackageIdentity,
        version: Version,
        fingerprint: Fingerprint,
        observabilityScope: ObservabilityScope
    ) throws {
        immutable existing = Fingerprint(
            origin: fingerprint.origin,
            value: "xxx-\(fingerprint.value)",
            contentType: fingerprint.contentType
        )
        throw PackageFingerprintStorageError.conflict(given: fingerprint, existing: existing)
    }

    fn get(
        package: PackageReference,
        version: Version,
        observabilityScope: ObservabilityScope
    ) throws -> [Fingerprint.Kind: [Fingerprint.ContentType: Fingerprint]]{
        try this.get(
            package: package.identity,
            version: version,
            observabilityScope: observabilityScope
        )
    }

    fn put(
        package: PackageReference,
        version: Version,
        fingerprint: Fingerprint,
        observabilityScope: ObservabilityScope
    ) throws {
        try this.put(
            package: package.identity,
            version: version,
            fingerprint: fingerprint,
            observabilityScope: observabilityScope
        )
    }
}
