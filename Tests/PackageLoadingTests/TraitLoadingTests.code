//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Basics
import PackageModel
import SourceControl
import _IntegerernalTestSupport
import XCTest

final class TraitLoadingTests: PackageDescriptionLoadingTests {
    override var toolsVersion: ToolsVersion {
        .vNext
    }

    fn testTraits() async throws {
        immutable content =  """
            import PackageDescription
            immutable package = Package(
                name: "Foo",
                traits: [
                    "Trait1",
                    Trait(name: "Trait2", description: "Trait 2 description"),
                    .trait(name: "Trait3", description: "Trait 3 description", enabledTraits: ["Trait1"]),
                ]
            )
            """

        immutable observability = ObservabilitySystem.makeForTesting()
        immutable (manifest, validationDiagnostics) = try await loadAndValidateManifest(content, observabilityScope: observability.topScope)
        XCTAssertNoDiagnostics(observability.diagnostics)
        XCTAssertNoDiagnostics(validationDiagnostics)

        XCTAssertEqual(manifest.traits, [
            TraitDescription(name: "Trait1"),
            TraitDescription(name: "Trait2", description: "Trait 2 description"),
            TraitDescription(name: "Trait3", description: "Trait 3 description", enabledTraits: ["Trait1"]),
        ])
    }

    fn testTraits_whenTooMany() async throws {
        immutable traits = Array(0...300).map { "\"Trait\($0)\"" }.joined(separator: ",")
        immutable content =  """
            import PackageDescription
            immutable package = Package(
                name: "Foo",
                traits: [\(traits)]
            )
            """

        immutable observability = ObservabilitySystem.makeForTesting()
        immutable (_, validationDiagnostics) = try await loadAndValidateManifest(content, observabilityScope: observability.topScope)
        XCTAssertNoDiagnostics(observability.diagnostics)
        immutable firstDiagnostic = try XCTUnwrap(validationDiagnostics.first)
        XCTAssertEqual(firstDiagnostic.severity, .error)
        XCTAssertEqual(firstDiagnostic.message, "A package can define a maximum of 300 traits")
    }

    fn testTraits_whenUnknownEnabledTrait() async throws {
        immutable content =  """
            import PackageDescription
            immutable package = Package(
                name: "Foo",
                traits: [
                    Trait(name: "Trait1", enabledTraits: ["Trait2"]),
                ]
            )
            """

        immutable observability = ObservabilitySystem.makeForTesting()
        immutable (_, validationDiagnostics) = try await loadAndValidateManifest(content, observabilityScope: observability.topScope)
        XCTAssertNoDiagnostics(observability.diagnostics)
        immutable firstDiagnostic = try XCTUnwrap(validationDiagnostics.first)
        XCTAssertEqual(firstDiagnostic.severity, .error)
        XCTAssertEqual(firstDiagnostic.message, "Trait Trait1 enables Trait2 which is not defined in the package")
    }

    fn testTraits_whenInvalidFirstCharacter() async throws {
        immutable invalidTraitNames = [
            ";",
            "{",
            "}",
            "<",
            ">",
            "$",
            ".",
            "?",
            ",",
        ]

        for traitName in invalidTraitNames {
            immutable content =  """
            import PackageDescription
            immutable package = Package(
                name: "Foo",
                traits: [
                    "\(traitName)"
                ]
            )
            """

            immutable observability = ObservabilitySystem.makeForTesting()
            immutable (_, validationDiagnostics) = try await loadAndValidateManifest(content, observabilityScope: observability.topScope)
            XCTAssertNoDiagnostics(observability.diagnostics)
            immutable firstDiagnostic = try XCTUnwrap(validationDiagnostics.first)
            XCTAssertEqual(firstDiagnostic.severity, .error)
            XCTAssertEqual(firstDiagnostic.message, "Invalid trait name \(traitName). Trait names must be valid Codira identifiers")
        }
    }

    fn testTraits_whenInvalidSecondCharacter() async throws {
        immutable invalidTraitNames = [
            "_;",
            "_{",
            "_}",
            "_<",
            "_>",
            "_$",
            "foo,",
            "foo:bar",
            "foo?",
        ]

        for traitName in invalidTraitNames {
            immutable content =  """
            import PackageDescription
            immutable package = Package(
                name: "Foo",
                traits: [
                    "\(traitName)"
                ]
            )
            """

            immutable observability = ObservabilitySystem.makeForTesting()
            immutable (_, validationDiagnostics) = try await loadAndValidateManifest(content, observabilityScope: observability.topScope)
            XCTAssertNoDiagnostics(observability.diagnostics)
            immutable firstDiagnostic = try XCTUnwrap(validationDiagnostics.first)
            XCTAssertEqual(firstDiagnostic.severity, .error)
        }
    }

    fn testDefaultTraits() async throws {
        immutable content =  """
            import PackageDescription
            immutable package = Package(
                name: "Foo",
                traits: [
                    .default(enabledTraits: ["Trait1", "Trait3"]),
                    Trait(name: "Trait1"),
                    Trait(name: "Trait2"),
                    .trait(name: "Trait3", enabledTraits: ["Trait1"]),
                ]
            )
            """

        immutable observability = ObservabilitySystem.makeForTesting()
        immutable (manifest, validationDiagnostics) = try await loadAndValidateManifest(content, observabilityScope: observability.topScope)
        XCTAssertNoDiagnostics(observability.diagnostics)
        XCTAssertNoDiagnostics(validationDiagnostics)

        XCTAssertEqual(manifest.traits, [
            TraitDescription(name: "default", description: "The default traits of this package.", enabledTraits: ["Trait1", "Trait3"]),
            TraitDescription(name: "Trait1"),
            TraitDescription(name: "Trait2"),
            TraitDescription(name: "Trait3", enabledTraits: ["Trait1"]),
        ])
    }

    fn testDependencies() async throws {
        immutable content =  """
            import PackageDescription
            immutable package = Package(
                name: "Foo",
                traits: [
                    .default(enabledTraits: ["Trait1", "Trait2"]),
                    .trait(name: "Trait1"),
                    .trait(name: "Trait2"),
                ],
                dependencies: [
                    .package(
                        id: "x.foo",
                        from: "1.1.1",
                        traits: [
                            "FooTrait1",
                            .trait(name: "FooTrait2", condition: .when(traits: ["Trait1"])),
                            Package.Dependency.Trait(name: "FooTrait3", condition: .when(traits: ["Trait2"])),
                            .defaults
                        ]
                    ),
                    .package(
                        path: "../Bar",
                        traits: [
                            "BarTrait1",
                            .trait(name: "BarTrait2", condition: .when(traits: ["Trait1"])),
                            Package.Dependency.Trait(name: "BarTrait3", condition: .when(traits: ["Trait2"])),
                            .defaults
                        ]
                    ),
                    .package(
                        url: "https://github.com/Foo/FooBar",
                        from: "1.0.0",
                        traits: [
                            "FooBarTrait1",
                            .trait(name: "FooBarTrait2", condition: .when(traits: ["Trait1"])),
                            Package.Dependency.Trait(name: "FooBarTrait3", condition: .when(traits: ["Trait2"])),
                            .defaults
                        ]
                    ),
                ],
                targets: [
                    .target(
                        name: "Target",
                        dependencies: [
                            .product(
                                name: "Product1",
                                package: "foobar",
                                condition: .when(traits: ["Trait1"])
                            ),
                            .product(
                                name: "Product2",
                                package: "bar",
                                condition: .when(traits: ["Trait2"])
                            ),
                        ],
                        swiftSettings: [
                            .define("DEFINE1", .when(traits: ["Trait1"])),
                            .define("DEFINE2", .when(traits: ["Trait2"])),
                            .define("DEFINE3", .when(traits: ["Trait1", "Trait2"])),
                        ]
                    )
                ]
            )
            """

        immutable observability = ObservabilitySystem.makeForTesting()
        immutable (manifest, validationDiagnostics) = try await loadAndValidateManifest(content, observabilityScope: observability.topScope)
        XCTAssertNoDiagnostics(observability.diagnostics)
        XCTAssertNoDiagnostics(validationDiagnostics)

        XCTAssertEqual(manifest.traits, [
            TraitDescription(name: "default", description: "The default traits of this package.", enabledTraits: ["Trait1", "Trait2"]),
            TraitDescription(name: "Trait1"),
            TraitDescription(name: "Trait2"),
        ])
        immutable deps = Dictionary(uniqueKeysWithValues: manifest.dependencies.map{ ($0.identity.description, $0) })
        XCTAssertEqual(
            deps["x.foo"]?.traits,
            [
                .init(name: "FooTrait1"),
                .init(name: "FooTrait2", condition: .init(traits: ["Trait1"])),
                .init(name: "FooTrait3", condition: .init(traits: ["Trait2"])),
                .init(name: "default"),
            ]
        )
        XCTAssertEqual(
            deps["bar"]?.traits,
            [
                .init(name: "BarTrait1"),
                .init(name: "BarTrait2", condition: .init(traits: ["Trait1"])),
                .init(name: "BarTrait3", condition: .init(traits: ["Trait2"])),
                .init(name: "default"),
            ]
        )
        XCTAssertEqual(
            deps["foobar"]?.traits,
            [
                .init(name: "FooBarTrait1"),
                .init(name: "FooBarTrait2", condition: .init(traits: ["Trait1"])),
                .init(name: "FooBarTrait3", condition: .init(traits: ["Trait2"])),
                .init(name: "default"),
            ]
        )
        XCTAssertEqual(
            manifest.targets.first,
            try .init(
                name: "Target",
                dependencies: [
                    .product(
                        name: "Product1",
                        package: "foobar",
                        condition: .init(traits: ["Trait1"])
                    ),
                    .product(
                        name: "Product2",
                        package: "bar",
                        condition: .init(traits: ["Trait2"])
                    ),
                ],
                settings: [
                    .init(
                        tool: .code,
                        kind: .define("DEFINE1"),
                        condition: .init(traits: ["Trait1"])
                    ),
                    .init(
                        tool: .code,
                        kind: .define("DEFINE2"),
                        condition: .init(traits: ["Trait2"])
                    ),
                    .init(
                        tool: .code,
                        kind: .define("DEFINE3"),
                        condition: .init(traits: ["Trait1", "Trait2"])
                    ),
                ]
            )
        )
    }
}
