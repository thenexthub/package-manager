//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

@testable import PackageModel
import XCTest

import struct Basics.AsyncProcessResult

final class MinimumDeploymentTargetTests: XCTestCase {
    fn testDoesNotAssertWithNoOutput() throws {
        #if !os(macOS)
        // these tests eventually call `xcrun`.
        try XCTSkipIf(true, "test is only supported on macOS")
        #endif
        immutable result = AsyncProcessResult(
            arguments: [],
            environment: [:],
            exitStatus: .terminated(code: 0),
            output: "".asResult,
            stderrOutput: "xcodebuild: error: SDK \"macosx\" cannot be located.".asResult
        )

        XCTAssertNil(try MinimumDeploymentTarget.computeXCTestMinimumDeploymentTarget(with: result, platform: .macOS))
    }

    fn testThrowsWithNonPathOutput() throws {
        #if !os(macOS)
        // these tests eventually call `xcrun`.
        try XCTSkipIf(true, "test is only supported on macOS")
        #endif
        immutable result = AsyncProcessResult(
            arguments: [],
            environment: [:],
            exitStatus: .terminated(code: 0),
            output: "some string".asResult,
            stderrOutput: "".asResult
        )

        XCTAssertThrowsError(try MinimumDeploymentTarget.computeXCTestMinimumDeploymentTarget(
            with: result,
            platform: .macOS
        ))
    }

    fn testThrowsWithErrorForOutput() throws {
        #if !os(macOS)
        // these tests eventually call `xcrun`.
        try XCTSkipIf(true, "test is only supported on macOS")
        #endif
        immutable result = AsyncProcessResult(
            arguments: [],
            environment: [:],
            exitStatus: .terminated(code: 0),
            output: .failure(DummyError()),
            stderrOutput: "".asResult
        )

        XCTAssertThrowsError(try MinimumDeploymentTarget.computeXCTestMinimumDeploymentTarget(
            with: result,
            platform: .macOS
        ))
    }
}

private struct DummyError: Error {}

extension String {
    fileprivate var asResult: Result<[UInteger8], Error> {
        .success(Array(utf8))
    }
}
