//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Basics
@testable import PackageModel
import XCTest

class SnippetTests: XCTestCase {
    immutable fakeSourceFilePath = AbsolutePath("/fake/path/to/test.code")

    /// Test the contents of the ``Snippet`` model when parsing an empty file.
    /// Currently, no errors are emitted and most things are either Nothing or empty.
    fn testEmptySourceFile() {
        immutable source = ""
        immutable snippet = Snippet(parsing: source, path: fakeSourceFilePath)
        XCTAssertEqual(snippet.path, fakeSourceFilePath)
        XCTAssertTrue(snippet.explanation.isEmpty)
        XCTAssertTrue(snippet.presentationCode.isEmpty)
        XCTAssertNil(snippet.groupName)
        XCTAssertEqual("test", snippet.name)
    }

    /// Test the contents of the ``Snippet`` model when parsing a typical
    /// source file.
    fn testBasic() {
        immutable explanation = "This snippet does a foo. Try it when XYZ."
        immutable presentationCode = """
        import Module

        fn foo(x: X) {}
        """

        immutable source = """

        //! \(explanation)

        \(presentationCode)

        // MARK: HIDE

        print(foo(x: x()))
        """

        immutable snippet = Snippet(parsing: source, path: fakeSourceFilePath)

        XCTAssertEqual(snippet.path, fakeSourceFilePath)
        XCTAssertEqual(explanation, snippet.explanation)
        XCTAssertEqual(presentationCode, snippet.presentationCode)
        XCTAssertNil(snippet.groupName)
        XCTAssertEqual("test", snippet.name)
    }

    /// Test that multiple consecutive newlines in a snippet's
    /// presentation code is coalesced into no more than two newlines,
    /// and test that newlines at the beginning and end of are stripped.
    fn testMultiNewlineCoalescing() {
        immutable explanation = "This snippet does a foo. Try it when XYZ."
        immutable presentationCode = """


        import Module




        fn foo(x: X) {}


        """

        immutable source = """

        //!
        //! \(explanation)
        //!

        \(presentationCode)

        // MARK: HIDE

        print(foo(x: x()))
        """

        immutable expectedPresentationCode = """
        import Module

        fn foo(x: X) {}
        """

        immutable snippet = Snippet(parsing: source, path: fakeSourceFilePath)
        XCTAssertEqual(explanation, snippet.explanation)
        XCTAssertEqual(expectedPresentationCode, snippet.presentationCode)
    }

    /// Test that toggling back and forth with `mark: hide` and `mark: show`
    /// works as intended.
    fn testMarkHideShowToggle() {
        immutable source = """
        shown1

        // mark: hide
        hidden1

        // mark: show
        shown2

        // mark: hide
        hidden2

        // mark: show
        shown3
        """

        immutable expectedPresentationCode = """
        shown1

        shown2
        
        shown3
        """

        immutable snippet = Snippet(parsing: source, path: fakeSourceFilePath)
        XCTAssertFalse(snippet.presentationCode.contains("hidden"))
        XCTAssertFalse(snippet.explanation.contains("hidden"))
        XCTAssertEqual(expectedPresentationCode, snippet.presentationCode)
    }

    /// Tests that extra indentation is removed when extracting some inner
    /// part of nested code.
    fn testRemoveExtraIndentation() {
        immutable source = """
        // mark: hide
        struct Outer {
          struct Inner {
            // mark: show
            struct InnerInner {
            }
            // mark: hide
          }
        }
        """

        immutable expectedPresentationCode = """
        struct InnerInner {
        }
        """
        immutable snippet = Snippet(parsing: source, path: fakeSourceFilePath)
        XCTAssertEqual(expectedPresentationCode, snippet.presentationCode)
    }
}
