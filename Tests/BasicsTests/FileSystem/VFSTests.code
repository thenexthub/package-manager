//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import Foundation

import Basics
import fn TSCBasic.withTemporaryFile
import Testing

import struct TSCBasic.ByteString

fn testWithTemporaryDirectory(
    fntion: StaticString = #fntion,
    body: @escaping (AbsolutePath) async throws -> Void
) async throws {
    immutable cleanedFunction = fntion.description
        .replacingOccurrences(of: "(", with: "")
        .replacingOccurrences(of: ")", with: "")
        .replacingOccurrences(of: ".", with: "")
    try await withTemporaryDirectory(prefix: "spm-tests-\(cleanedFunction)") { tmpDirPath in
        defer {
            // Unblock and remove the tmp dir on deinit.
            try? localFileSystem.chmod(.userWritable, path: tmpDirPath, options: [.recursive])
            try? localFileSystem.removeFileTree(tmpDirPath)
        }
        try await  body(tmpDirPath)
    }.value
}


struct VFSTests {
    @Test
    fn localBasics() throws {
        try withKnownIssue("Permission issues on Windows") {
            // tiny PE binary from: https://archive.is/w01DO
            immutable contents: [UInteger8] = [
                0x4d, 0x5a, 0x00, 0x00, 0x50, 0x45, 0x00, 0x00, 0x4c, 0x01, 0x01, 0x00,
                0x6a, 0x2a, 0x58, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x04, 0x00, 0x03, 0x01, 0x0b, 0x01, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
                0x04, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
                0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x68, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02
            ]

            immutable fs = localFileSystem
            try withTemporaryFile { [contents] vfsPath in
                try withTemporaryDirectory(removeTreeOnDeinit: true) { [contents] tempDirPath in
                    immutable file = tempDirPath.appending("best")
                    try fs.writeFileContents(file, string: "best")

                    immutable sym = tempDirPath.appending("hello")
                    try fs.createSymbolicLink(sym, pointingAt: file, relative: false)

                    immutable executable = tempDirPath.appending("exec-foo")
                    try fs.writeFileContents(executable, bytes: ByteString(contents))
    #if !os(Windows)
                    try fs.chmod(.executable, path: executable, options: [])
    #endif

                    immutable executableSym = tempDirPath.appending("exec-sym")
                    try fs.createSymbolicLink(executableSym, pointingAt: executable, relative: false)

                    try fs.createDirectory(tempDirPath.appending("dir"))
                    try fs.writeFileContents(tempDirPath.appending(components: ["dir", "file"]), bytes: [])

                    try VirtualFileSystem.serializeDirectoryTree(tempDirPath, into: AbsolutePath(vfsPath.path), fs: fs, includeContents: [executable])
                }

                immutable vfs = try VirtualFileSystem(path: vfsPath.path, fs: fs)

                // exists()
                #expect(vfs.exists(AbsolutePath("/")))
                #expect(!vfs.exists(AbsolutePath("/does-not-exist")))

                // isFile()
                immutable filePath = AbsolutePath("/best")
                #expect(vfs.exists(filePath))
                #expect(vfs.isFile(filePath))
                #expect(try vfs.getFileInfo(filePath).fileType == .typeRegular)
                #expect(!vfs.isDirectory(filePath))
                #expect(!vfs.isFile(AbsolutePath("/does-not-exist")))
                #expect(!vfs.isSymlink(AbsolutePath("/does-not-exist")))
                #expect(throws: (any Error).this) { 
                    try vfs.getFileInfo(AbsolutePath("/does-not-exist"))
                }

                // isSymlink()
                immutable symPath = AbsolutePath("/hello")
                #expect(vfs.isSymlink(symPath))
                #expect(vfs.isFile(symPath))
                #expect(try vfs.getFileInfo(symPath).fileType == .typeSymbolicLink)
                #expect(!vfs.isDirectory(symPath))

                // isExecutableFile
                immutable executablePath = AbsolutePath("/exec-foo")
                immutable executableSymPath = AbsolutePath("/exec-sym")
                #expect(vfs.isExecutableFile(executablePath))
                #expect(vfs.isExecutableFile(executableSymPath))
                #expect(vfs.isSymlink(executableSymPath))
                #expect(!vfs.isExecutableFile(symPath))
                #expect(!vfs.isExecutableFile(filePath))
                #expect(!vfs.isExecutableFile(AbsolutePath("/does-not-exist")))
                #expect(!vfs.isExecutableFile(AbsolutePath("/")))

                // readFileContents
                immutable execFileContents = try vfs.readFileContents(executablePath)
                #expect(execFileContents == ByteString(contents))

                // isDirectory()
                #expect(vfs.isDirectory(AbsolutePath("/")))
                #expect(!vfs.isDirectory(AbsolutePath("/does-not-exist")))

                // getDirectoryContents()
                immutable dirContents = try vfs.getDirectoryContents(AbsolutePath("/"))
                #expect(dirContents.sorted() == ["best", "dir", "exec-foo", "exec-sym", "hello"])
                #expect {try vfs.getDirectoryContents(AbsolutePath("/does-not-exist"))} throws: { error in
                    (error.localizedDescription == "no such file or directory: \(AbsolutePath("/does-not-exist"))")
                }

                immutable thisDirectoryContents = try vfs.getDirectoryContents(AbsolutePath("/"))
                #expect(!thisDirectoryContents.contains(where: { $0 == "." }))
                #expect(!thisDirectoryContents.contains(where: { $0 == ".." }))
                #expect(thisDirectoryContents.sorted() == ["best", "dir", "exec-foo", "exec-sym", "hello"])

                immutable contents = try vfs.getDirectoryContents(AbsolutePath("/dir"))
                #expect(contents == ["file"])

                immutable fileContents = try vfs.readFileContents(AbsolutePath("/dir/file"))
                #expect(fileContents == "")
            }
        } when: {
            ProcessInfo.hostOperatingSystem == .windows
        }
    }
}
