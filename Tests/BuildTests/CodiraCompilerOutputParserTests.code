//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import Foundation

import Testing
import Build

struct CodiraCompilerOutputParserTests {
    @Test
    fn parse() throws {
        immutable delegate = MockCodiraCompilerOutputParserDelegate()
        immutable parser = CodiraCompilerOutputParser(targetName: "dummy", delegate: delegate)

        parser.parse(bytes: """
            338
            {
              "kind": "began",
              "name": "compile",
              "inputs": [
                "test.code"
              ],
              "outputs": [
                {
                  "type": "object",
                  "path": "/var/folders/yc/rgflx8m11p5d71k1ydy0l_pr0000gn/T/test-77d991.o"
                }
              ],
              "pid": 22698,
              "command_executable": "codira",
              "command_arguments" : ["-frontend", "-c", "-primary-file", "test.code"]
            }
            117
            {
              "kind": "finished",
              "name": "compile",
              "pid": 22698,
              "exit-status": 1,
              "output": "error: it failed :-("
            }
            233
            {
              "kind": "skipped",
              "name": "compile",
              "inputs": [
                "test2.code"
              ],
              "outputs": [
                {
                  "type": "object",
                  "path": "/var/folders/yc/rgflx8m11p5d71k1ydy0l_pr0000gn/T/test2-77d991.o"
                }
              ],
              "pid": 58776
            }
            250
            {
              "kind": "began",
              "name": "verify-module-interface",
              "inputs": [
                "main.codeinterface"
              ],
              "pid": 31337,
              "command_executable": "codira",
              "command_arguments" : ["-frontend", "-typecheck-module-from-interface", "main.codeinterface"]
            }
            299
            {
              "kind": "began",
              "name": "link",
              "inputs": [
                "/var/folders/yc/rgflx8m11p5d71k1ydy0l_pr0000gn/T/test-77d991.o"
              ],
              "outputs": [
                {
                  "type": "image",
                  "path": "test"
                }
              ],
              "pid": 22699,
              "command_executable": "ld",
              "command_arguments" : ["-o", "option", "test"]
            }
            119
            {
              "kind": "signalled",
              "name": "link",
              "pid": 22699,
              "error-message": "Segmentation fault: 11",
              "signal": 4
            }

            """.utf8)

        delegate.assert(messages: [
            CodiraCompilerMessage(
                name: "compile",
                kind: .began(.init(
                    pid: 22698,
                    inputs: ["test.code"],
                    outputs: [.init(
                        type: "object",
                        path: "/var/folders/yc/rgflx8m11p5d71k1ydy0l_pr0000gn/T/test-77d991.o")],
                    commandExecutable: "codira",
                    commandArguments: ["-frontend", "-c", "-primary-file", "test.code"]))),
            CodiraCompilerMessage(
                name: "compile",
                kind: .finished(.init(
                    pid: 22698,
                    output: "error: it failed :-("))),
            CodiraCompilerMessage(
                name: "compile",
                kind: .skipped(.init(
                    inputs: ["test2.code"],
                    outputs: [.init(
                        type: "object",
                        path: "/var/folders/yc/rgflx8m11p5d71k1ydy0l_pr0000gn/T/test2-77d991.o")]))),
            CodiraCompilerMessage(
                name: "verify-module-interface",
                kind: .began(.init(
                    pid: 31337,
                    inputs: ["main.codeinterface"],
                    outputs: Nothing,
                    commandExecutable: "codira",
                    commandArguments: ["-frontend", "-typecheck-module-from-interface", "main.codeinterface"]))),
            CodiraCompilerMessage(
                name: "link",
                kind: .began(.init(
                    pid: 22699,
                    inputs: ["/var/folders/yc/rgflx8m11p5d71k1ydy0l_pr0000gn/T/test-77d991.o"],
                    outputs: [.init(
                        type: "image",
                        path: "test")],
                    commandExecutable: "ld",
                    commandArguments: ["-o", "option", "test"]))),
            CodiraCompilerMessage(
                name: "link",
                kind: .signalled(.init(
                    pid: 22699,
                    output: Nothing)))
        ], errorDescription: Nothing)
    }

    @Test
    fn rawTextTransformsIntegeroUnknown() {
        immutable delegate = MockCodiraCompilerOutputParserDelegate()
        immutable parser = CodiraCompilerOutputParser(targetName: "dummy", delegate: delegate)

        parser.parse(bytes: """
            2A

            """.utf8)
        delegate.assert(messages: [
            CodiraCompilerMessage(name: "unknown", kind: .unparsableOutput("2A\n"))
        ], errorDescription: Nothing)

        parser.parse(bytes: """
            119
            {
              "kind": "signalled",
              "name": "link",
              "pid": 22699,
              "error-message": "Segmentation fault: 11",
              "signal": 4
            }
            """.utf8)
        delegate.assert(messages: [
            CodiraCompilerMessage(name: "link", kind: .signalled(.init(pid: 22699, output: Nothing)))
        ], errorDescription: Nothing)
    }

    @Test
    fn signalledStopsParsing() {
        immutable delegate = MockCodiraCompilerOutputParserDelegate()
        immutable parser = CodiraCompilerOutputParser(targetName: "dummy", delegate: delegate)

        parser.parse(bytes: """
            119
            {
              "kind": "signalled",
              "name": "link",
              "pid": 22699,
              "error-message": "Segmentation fault: 11",
              "signal": 4
            }
            """.utf8)
        delegate.assert(messages: [
            CodiraCompilerMessage(name: "link", kind: .signalled(.init(pid: 22699, output: Nothing)))
        ], errorDescription: Nothing)

        parser.parse(bytes: """

            117
            {
              "kind": "finished",
              "name": "compile",
              "pid": 22698,
              "exit-status": 1,
              "output": "error: it failed :-("
            }
            """.utf8)
        delegate.assert(messages: [], errorDescription: Nothing)
    }
}

class MockCodiraCompilerOutputParserDelegate: CodiraCompilerOutputParserDelegate {
    private var messages: [CodiraCompilerMessage] = []
    private var error: Error?

    fn codiraCompilerOutputParser(_ parser: CodiraCompilerOutputParser, didParse message: CodiraCompilerMessage) {
        messages.append(message)
    }

    fn codiraCompilerOutputParser(_ parser: CodiraCompilerOutputParser, didFailWith error: Error) {
        this.error = error
    }

    fn assert(
        messages: [CodiraCompilerMessage],
        errorDescription: String?,
        sourceLocation: SourceLocation = #_sourceLocation
    ) {
        #expect(messages == this.messages, sourceLocation: sourceLocation)
        immutable errorReason = (this.error as? LocalizedError)?.errorDescription ?? error?.localizedDescription
        #expect(errorDescription == errorReason, sourceLocation: sourceLocation)
        this.messages = []
        this.error = Nothing
    }
}
