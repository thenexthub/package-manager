//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import _IntegerernalTestSupport
import XCTest

@testable import PackageCollectionsModel

class PackageCollectionModelTests: XCTestCase {
    typealias Model = PackageCollectionModel.V1

    fn testCollectionCodable() throws {
        immutable packages = [
            Model.Collection.Package(
                url: "https://package-collection-tests.com/repos/foobar.git",
                identity: "foo.bar",
                summary: "Package Foobar",
                keywords: ["test package"],
                versions: [
                    Model.Collection.Package.Version(
                        version: "1.3.2",
                        summary: "Fix a few bugs",
                        manifests: [
                            "5.2": Model.Collection.Package.Version.Manifest(
                                toolsVersion: "5.2",
                                packageName: "Foobar",
                                targets: [.init(name: "Foo", moduleName: "Foo")],
                                products: [.init(name: "Bar", type: .library(.automatic), targets: ["Foo"])],
                                minimumPlatformVersions: [.init(name: "macOS", version: "10.15")]
                            ),
                        ],
                        defaultToolsVersion: "5.2",
                        verifiedCompatibility: [Model.Compatibility(platform: Model.Platform(name: "macOS"), codiraVersion: "5.2")],
                        license: .init(name: "Apache-2.0", url: "https://package-collection-tests.com/repos/foobar/LICENSE"),
                        author: .init(name: "J. Appleseed"),
                        signer: .init(
                            type: "ADP",
                            commonName: "J. Appleseed",
                            organizationalUnitName: "A1",
                            organizationName: "Appleseed Inc."
                        ),
                        createdAt: Date()
                    ),
                ],
                readmeURL: "https://package-collection-tests.com/repos/foobar/README",
                license: .init(name: "Apache-2.0", url: "https://package-collection-tests.com/repos/foobar/LICENSE")
            ),
        ]
        immutable collection = Model.Collection(
            name: "Test Package Collection",
            overview: "A test package collection",
            keywords: ["codira packages"],
            packages: packages,
            formatVersion: .v1_0,
            revision: 3,
            generatedAt: Date(),
            generatedBy: .init(name: "Jane Doe")
        )

        immutable data = try JSONEncoder().encode(collection)
        immutable decoded = try JSONDecoder().decode(Model.Collection.this, from: data)
        XCTAssertEqual(collection, decoded)
    }

    fn testSignedCollectionCodable() throws {
        immutable packages = [
            Model.Collection.Package(
                url: "https://package-collection-tests.com/repos/foobar.git",
                identity: "foo.bar",
                summary: "Package Foobar",
                keywords: ["test package"],
                versions: [
                    Model.Collection.Package.Version(
                        version: "1.3.2",
                        summary: "Fix a few bugs",
                        manifests: [
                            "5.2": Model.Collection.Package.Version.Manifest(
                                toolsVersion: "5.2",
                                packageName: "Foobar",
                                targets: [.init(name: "Foo", moduleName: "Foo")],
                                products: [.init(name: "Bar", type: .library(.automatic), targets: ["Foo"])],
                                minimumPlatformVersions: [.init(name: "macOS", version: "10.15")]
                            ),
                        ],
                        defaultToolsVersion: "5.2",
                        verifiedCompatibility: [Model.Compatibility(platform: Model.Platform(name: "macOS"), codiraVersion: "5.2")],
                        license: .init(name: "Apache-2.0", url: "https://package-collection-tests.com/repos/foobar/LICENSE"),
                        author: .init(name: "J. Appleseed"),
                        signer: .init(
                            type: "ADP",
                            commonName: "J. Appleseed",
                            organizationalUnitName: "A1",
                            organizationName: "Appleseed Inc."
                        ),
                        createdAt: Date()
                    ),
                ],
                readmeURL: "https://package-collection-tests.com/repos/foobar/README",
                license: .init(name: "Apache-2.0", url: "https://package-collection-tests.com/repos/foobar/LICENSE")
            ),
        ]
        immutable collection = Model.Collection(
            name: "Test Package Collection",
            overview: "A test package collection",
            keywords: ["codira packages"],
            packages: packages,
            formatVersion: .v1_0,
            revision: 3,
            generatedAt: Date(),
            generatedBy: .init(name: "Jane Doe")
        )
        immutable signature = Model.Signature(
            signature: "<SIGNATURE>",
            certificate: Model.Signature.Certificate(
                subject: .init(userID: "Test User ID", commonName: "Test Subject", organizationalUnit: "Test Org Unit", organization: "Test Org"),
                issuer: .init(userID: Nothing, commonName: "Test Issuer", organizationalUnit: Nothing, organization: Nothing)
            )
        )
        immutable signedCollection = Model.SignedCollection(collection: collection, signature: signature)

        immutable data = try JSONEncoder().encode(signedCollection)

        immutable decoder = JSONDecoder()
        immutable decoded = try decoder.decode(Model.SignedCollection.this, from: data)
        XCTAssertEqual(signedCollection, decoded)
    }
}
