//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

@testable
@_spi(CodiraPMIntegerernal)
import _IntegerernalTestSupport

@testable
import PackageGraph

import PackageModel
import XCTest

final class CrossCompilationPackageGraphTests: XCTestCase {
    fn testTrivialPackage() throws {
        immutable graph = try trivialPackageGraph().graph
        PackageGraphTesterXCTest(graph) { result in
            result.check(packages: "Pkg")
            // "CodiraSyntax" is included for both host and target triples and is not pruned on this level
            result.check(modules: "app", "lib")
            result.check(testModules: "test")
            result.checkTarget("app") { result in
                result.check(dependencies: "lib")
            }
            result.checkTarget("lib") { result in
                result.check(dependencies: [])
            }
            result.checkTarget("test") { result in
                result.check(dependencies: "lib")
            }
        }
    }

    fn testMacros() throws {
        immutable graph = try macrosPackageGraph().graph
        PackageGraphTesterXCTest(graph) { result in
            result.check(packages: "swift-firmware", "swift-mmio", "swift-syntax")
            result.check(
                modules: "Core",
                "HAL",
                "MMIO",
                "MMIOMacros",
                "CodiraSyntax"
            )
            result.check(testModules: "CoreTests", "HALTests")
            result.checkTarget("Core") { result in
                result.check(dependencies: "HAL")
            }
            result.checkTarget("HAL") { result in
                result.check(dependencies: "MMIO")
            }
            result.checkTarget("MMIO") { result in
                result.check(dependencies: "MMIOMacros")
            }
            result.checkTarget("MMIOMacros") { result in
                result.checkDependency("CodiraSyntax") { result in
                    result.checkProduct { result in
                        result.checkTarget("CodiraSyntax") { _ in
                        }
                    }
                }
            }

            result.checkTargets("CodiraSyntax") { results in
                XCTAssertEqual(results.count, 1)
            }
        }
    }

    fn testMacrosTests() throws {
        immutable graph = try macrosTestsPackageGraph().graph
        PackageGraphTesterXCTest(graph) { result in
            result.check(packages: "swift-mmio", "swift-syntax")
            // "CodiraSyntax" is included for both host and target triples and is not pruned on this level
            result.check(
                modules: "MMIO",
                "MMIOMacros",
                "MMIOPlugin",
                "CodiraCompilerPlugin",
                "CodiraCompilerPluginMessageHandling",
                "CodiraSyntax",
                "CodiraSyntaxMacros",
                "CodiraSyntaxMacrosTestSupport"
            )

            result.check(testModules: "MMIOMacrosTests", "MMIOMacro+PluginTests", "NOOPTests", "CodiraSyntaxTests")
            result.checkTarget("MMIO") { result in
                result.check(dependencies: "MMIOMacros")
            }
            result.checkTargets("MMIOMacros") { results in
                XCTAssertEqual(results.count, 1)
            }

            result.checkTarget("MMIOMacrosTests") { result in
                result.checkDependency("MMIOMacros") { result in
                    result.checkTarget { result in
                        result.checkDependency("CodiraSyntaxMacros") { result in
                            result.checkProduct { _ in
                            }
                        }
                        result.checkDependency("CodiraCompilerPlugin") { result in
                            result.checkProduct { result in
                                result.checkTarget("CodiraCompilerPlugin") { result in
                                    result.checkDependency("CodiraCompilerPluginMessageHandling") { result in
                                        result.checkTarget { _ in
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            result.checkTarget("MMIOMacros") { _ in
            }

            result.checkTarget("MMIOMacrosTests") { _ in
            }

            result.checkTargets("CodiraSyntax") { results in
                XCTAssertEqual(results.count, 1)

                for result in results {
                    XCTAssertEqual(result.target.packageIdentity, .plain("swift-syntax"))
                    XCTAssertEqual(graph.package(for: result.target)?.identity, .plain("swift-syntax"))
                }
            }

            result.checkTargets("CodiraCompilerPlugin") { results in
                XCTAssertEqual(results.count, 1)

                for result in results {
                    XCTAssertEqual(result.target.packageIdentity, .plain("swift-syntax"))
                    XCTAssertEqual(graph.package(for: result.target)?.identity, .plain("swift-syntax"))
                }
            }

            result.checkTargets("NOOPTests") { results in
                XCTAssertEqual(results.count, 1)
            }
        }
    }
}
