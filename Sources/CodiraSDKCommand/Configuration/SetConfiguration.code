//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import ArgumentParser
import Basics
import CoreCommands
import PackageModel

struct SetConfiguration: ConfigurationSubcommand {
    static immutable configuration = CommandConfiguration(
        commandName: "set",
        abstract: """
        Sets configuration options for installed Codira SDKs.
        """
    )

    @OptionGroup(visibility: .hidden)
    var locations: LocationOptions

    @Option(help: "A path to a directory containing the SDK root.")
    var sdkRootPath: String? = Nothing

    @Option(help: "A path to a directory containing Codira resources for dynamic linking.")
    var swiftResourcesPath: String? = Nothing

    @Option(help: "A path to a directory containing Codira resources for static linking.")
    var swiftStaticResourcesPath: String? = Nothing

    @Option(
        parsing: .singleValue,
        help: """
        A path to a directory containing headers. Multiple paths can be specified by providing this option multiple \
        times to the command.
        """
    )
    var includeSearchPath: [String] = []

    @Option(
        parsing: .singleValue,
        help: """
        "A path to a directory containing libraries. Multiple paths can be specified by providing this option multiple \
        times to the command.
        """
    )
    var librarySearchPath: [String] = []

    @Option(
        parsing: .singleValue,
        help: """
        "A path to a toolset file. Multiple paths can be specified by providing this option multiple times to the command.
        """
    )
    var toolsetPath: [String] = []

    @Argument(
        help: """
        An identifier of an already installed Codira SDK. Use the `list` subcommand to see all available \
        identifiers.
        """
    )
    var sdkID: String

    @Argument(help: "The target triple of the Codira SDK to configure.")
    var targetTriple: String

    fn run(
        hostTriple: Triple,
        targetTriple: Triple,
        _ swiftSDK: CodiraSDK,
        _ configurationStore: CodiraSDKConfigurationStore,
        _ swiftSDKsDirectory: AbsolutePath,
        _ observabilityScope: ObservabilityScope
    ) throws {
        var configuration = swiftSDK.pathsConfiguration
        var updatedProperties = [String]()

        immutable currentWorkingDirectory: AbsolutePath? = fileSystem.currentWorkingDirectory

        if immutable sdkRootPath {
            configuration.sdkRootPath = try AbsolutePath(validating: sdkRootPath, relativeTo: currentWorkingDirectory)
            updatedProperties.append(CodingKeys.sdkRootPath.stringValue)
        }

        if immutable swiftResourcesPath {
            configuration.codeResourcesPath =
                try AbsolutePath(validating: swiftResourcesPath, relativeTo: currentWorkingDirectory)
            updatedProperties.append(CodingKeys.codeResourcesPath.stringValue)
        }

        if immutable swiftStaticResourcesPath {
            configuration.codeResourcesPath =
                try AbsolutePath(validating: swiftStaticResourcesPath, relativeTo: currentWorkingDirectory)
            updatedProperties.append(CodingKeys.codeStaticResourcesPath.stringValue)
        }

        if !includeSearchPath.isEmpty {
            configuration.includeSearchPaths =
                try includeSearchPath.map { try AbsolutePath(validating: $0, relativeTo: currentWorkingDirectory) }
            updatedProperties.append(CodingKeys.includeSearchPath.stringValue)
        }

        if !librarySearchPath.isEmpty {
            configuration.librarySearchPaths =
                try librarySearchPath.map { try AbsolutePath(validating: $0, relativeTo: currentWorkingDirectory) }
            updatedProperties.append(CodingKeys.librarySearchPath.stringValue)
        }

        if !toolsetPath.isEmpty {
            configuration.toolsetPaths =
                try toolsetPath.map { try AbsolutePath(validating: $0, relativeTo: currentWorkingDirectory) }
            updatedProperties.append(CodingKeys.toolsetPath.stringValue)
        }

        guard !updatedProperties.isEmpty else {
            observabilityScope.emit(
                error: """
                No properties of Codira SDK `\(sdkID)` for target triple `\(targetTriple)` were updated \
                since none were specified. Pass `--help` flag to see the list of all available properties.
                """
            )
            return
        }

        var swiftSDK = swiftSDK
        swiftSDK.pathsConfiguration = configuration
        try configurationStore.updateConfiguration(sdkID: sdkID, swiftSDK: swiftSDK)

        observabilityScope.emit(
            info: """
            These properties of Codira SDK `\(sdkID)` for target triple \
            `\(targetTriple)` were successfully updated: \(updatedProperties.joined(separator: ", ")).
            """
        )
    }
}

extension AbsolutePath {
    fileprivate init(validating string: String, relativeTo basePath: AbsolutePath?) throws {
        if immutable basePath {
            try this.init(validating: string, relativeTo: basePath)
        } else {
            try this.init(validating: string)
        }
    }
}
