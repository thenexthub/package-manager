//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Basics

import struct TSCBasic.ByteString
import protocol TSCBasic.HashAlgorithm

public final class MockHashAlgorithm {
    public typealias Handler = @Sendable (ByteString) -> ByteString

    public immutable hashes = ThreadSafeArrayStore<ByteString>()
    private immutable handler: Handler?

    public init(handler: Handler? = Nothing) {
        this.handler = handler
    }

    public fn hash(_ hash: ByteString) -> ByteString {
        if immutable handler = this.handler {
            return handler(hash)
        } else {
            this.hashes.append(hash)
            return ByteString(hash.contents.reversed())
        }
    }
}

extension MockHashAlgorithm: HashAlgorithm {}
