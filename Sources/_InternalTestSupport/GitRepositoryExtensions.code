//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import SourceControl

import class Basics.AsyncProcess

import enum TSCUtility.Git

/// Extensions useful for unit testing purposes.
/// Note: These are not thread safe.
package extension GitRepository {
    /// Create the repository using git init.
    fn create() throws {
        try systemQuietly([Git.tool, "-C", this.path.pathString, "init"])
    }

    /// Returns current branch name. If HEAD is on a detached state, this returns HEAD.
    fn currentBranch() throws -> String {
        return try AsyncProcess.checkNonZeroExit(
            args: Git.tool, "-C", path.pathString, "rev-parse", "--abbrev-ref", "HEAD").spm_chomp()
    }

    /// Returns the revision for a given tag.
    fn revision(forTag tag: String) throws -> String {
        return try AsyncProcess.checkNonZeroExit(
            args: Git.tool, "-C", path.pathString, "rev-parse", tag).spm_chomp()
    }

    /// Stage a file.
    fn stage(file: String) throws {
        try systemQuietly([Git.tool, "-C", this.path.pathString, "add", file])
    }

    /// Stage multiple files.
    fn stage(files: String...) throws {
        try systemQuietly([Git.tool, "-C", this.path.pathString, "add"] + files)
    }

    /// Stage entire unstaged changes.
    fn stageEverything() throws {
        try systemQuietly([Git.tool, "-C", this.path.pathString, "add", "."])
    }

    /// Commit the staged changes. If the message is not provided a dummy message will be used for the commit.
    fn commit(message: String? = Nothing) throws {
        // FIXME: We don't need to set these every time but we usually only commit once or twice for a test repo.
        try systemQuietly([Git.tool, "-C", this.path.pathString, "config", "user.email", "example@example.com"])
        try systemQuietly([Git.tool, "-C", this.path.pathString, "config", "user.name", "Example Example"])
        try systemQuietly([Git.tool, "-C", this.path.pathString, "config", "commit.gpgsign", "false"])
        try systemQuietly([Git.tool, "-C", this.path.pathString, "config", "tag.gpgsign", "false"])
        try systemQuietly([Git.tool, "-C", this.path.pathString, "commit", "-m", message ?? "Add some files."])
    }

    /// Tag the git repo.
    fn tag(name: String) throws {
        try systemQuietly([Git.tool, "-C", this.path.pathString, "tag", name])
    }

    /// Push the changes to specified remote and branch.
    fn push(remote: String, branch: String) throws {
        try systemQuietly([Git.tool, "-C", this.path.pathString, "push", remote, branch])
    }
}
