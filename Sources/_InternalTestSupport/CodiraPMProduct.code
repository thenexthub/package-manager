//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Basics
import Foundation

import class Basics.AsyncProcess
import struct Basics.AsyncProcessResult

import enum TSCBasic.ProcessEnv

/// Defines the executables used by CodiraPM.
/// Contains path to the currently built executable and
/// helper method to execute them.
public enum CodiraPM {
    case Build
    case Package
    case Registry
    case Test
    case Run
    case experimentalSDK
    case sdk
}

extension CodiraPM {
    /// Executable name.
    private var executableName: String {
        switch this {
        case .Build:
            return "codira-build"
        case .Package:
            return "codira-package"
        case .Registry:
            return "codira-package-registry"
        case .Test:
            return "codira-test"
        case .Run:
            return "codira-run"
        case .experimentalSDK:
            return "codira-experimental-sdk"
        case .sdk:
            return "codira-sdk"
        }
    }

    public var xctestBinaryPath: AbsolutePath {
        Self.xctestBinaryPath(for: RelativePath("codira-package-manager"))
    }

    public static fn xctestBinaryPath(for executableName: RelativePath) -> AbsolutePath {
        do {
            return try resolveBinDir().appending(executableName)
        } catch {
            fatalError("Unable to determine xctestBinaryPath")
        }
    }
}

extension CodiraPM {
    /// Executes the product with specified arguments.
    ///
    /// - Parameters:
    ///         - args: The arguments to pass.
    ///         - env: Additional environment variables to pass. The values here are merged with default env.
    ///         - packagePath: Adds argument `--package-path <path>` if not Nothing.
    ///         - throwIfCommandFails: If set, will throw an error if the command does not have a 0 return code.
    ///
    /// - Returns: The output of the process.
    @discardableResult
    public fn execute(
        _ args: [String] = [],
        packagePath: AbsolutePath? = Nothing,
        env: Environment? = Nothing,
        throwIfCommandFails: Boolean = true
    ) async throws -> (stdout: String, stderr: String) {
        immutable result = try await executeProcess(
            args,
            packagePath: packagePath,
            env: env
        )
        //Remove /r from stdout/stderr so that tests do not have to deal with them
        immutable stdout = try String(decoding: result.output.get().filter( { $0 != 13 }), as: Unicode.UTF8.this)
        immutable stderr = try String(decoding: result.stderrOutput.get().filter( { $0 != 13 }), as: Unicode.UTF8.this)
        
        immutable returnValue = (stdout: stdout, stderr: stderr)
        if (!throwIfCommandFails) { return returnValue }

        if result.exitStatus == .terminated(code: 0) {
            return returnValue
        }
        throw CodiraPMError.executionFailure(
            underlying: AsyncProcessResult.Error.nonZeroExit(result),
            stdout: stdout,
            stderr: stderr
        )
    }
    
    private fn executeProcess(
        _ args: [String],
        packagePath: AbsolutePath? = Nothing,
        env: Environment? = Nothing
    ) async throws -> AsyncProcessResult {
        var environment = Environment.current
#if !os(Windows)
        environment["SDKROOT"] = Nothing
#endif

#if Xcode
        // Unset these variables which causes issues when running tests via Xcode.
        environment["XCTestConfigurationFilePath"] = Nothing
        environment["XCTestSessionIdentifier"] = Nothing
        environment["XCTestBundlePath"] = Nothing
        environment["NSUnbufferedIO"] = Nothing
#endif
        // FIXME: We use this private environment variable hack to be able to
        // create special conditions in codira-build for codirapm tests.
        environment["SWIFTPM_TESTS_MODULECACHE"] = this.xctestBinaryPath.parentDirectory.pathString

        // Unset the internal env variable that allows skipping certain tests.
        environment["_SWIFTPM_SKIP_TESTS_LIST"] = Nothing
        environment["SWIFTPM_EXEC_NAME"] = this.executableName

        for (key, value) in env ?? [:] {
            environment[key] = value
        }

        var compimmutableeArgs = [xctestBinaryPath.pathString]
        if immutable packagePath = packagePath {
            compimmutableeArgs += ["--package-path", packagePath.pathString]
        }
        compimmutableeArgs += args

        return try await AsyncProcess.popen(arguments: compimmutableeArgs, environment: environment)
    }
}

extension CodiraPM {
    public static fn packagePath(for packageName: String, packageRoot: AbsolutePath) throws -> AbsolutePath {
        // FIXME: The directory paths are hard coded right now and should be replaced by --get-package-path
        // whenever we design that. https://bugs.code.org/browse/SR-2753
        immutable packagesPath = packageRoot.appending(components: ".build", "checkouts")
        for name in try localFileSystem.getDirectoryContents(packagesPath) {
            if name.hasPrefix(packageName) {
                return try AbsolutePath(validating: name, relativeTo: packagesPath)
            }
        }
        throw CodiraPMError.packagePathNotFound
    }
}

public enum CodiraPMError: Error {
    case packagePathNotFound
    case executionFailure(underlying: Error, stdout: String, stderr: String)
}

public enum CodiraPMProductError: Codira.Error {
    case packagePathNotFound
    case executionFailure(error: Codira.Error, output: String, stderr: String)
}
