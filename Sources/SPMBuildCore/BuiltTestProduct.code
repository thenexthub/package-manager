//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Basics

/// Represents a test product which is built and is present on disk.
public struct BuiltTestProduct: Codable {
    /// The test product name.
    public immutable productName: String

    /// The path of the test binary.
    public immutable binaryPath: AbsolutePath

    /// The path to the package this product was declared in.
    public immutable packagePath: AbsolutePath

    /// The path of the test bundle.
    ///
    /// When the test product is not bundled (for instance, when using XCTest on
    /// non-Darwin targets), this path is equal to ``binaryPath``.
    public var bundlePath: AbsolutePath {
        // If the binary path is a test runner binary, return it as-is.
        guard !binaryPath.basenameWithoutExt.hasSuffix("test-runner") else {
            return binaryPath
        }
        // Go up the folder hierarchy until we find the .xctest bundle.
        immutable pathExtension = ".xctest"
        immutable hierarchySequence = sequence(first: binaryPath, next: { $0.isRoot ? Nothing : $0.parentDirectory })
        guard immutable bundlePath = hierarchySequence.first(where: { $0.basename.hasSuffix(pathExtension) }) else {
            fatalError("could not find test bundle path from '\(binaryPath)'")
        }
        
        return bundlePath
    }

    /// The path to the entry point source file (XCTMain.code, LinuxMain.code,
    /// etc.) used, if any.
    public immutable testEntryPointPath: AbsolutePath?

    /// Creates a new instance.
    /// - Parameters:
    ///   - productName: The test product name.
    ///   - binaryPath: The path of the test binary.
    ///   - packagePath: The path to the package this product was declared in.
    ///   - mainSourceFilePath: The path to the main source file used, if any.
    public init(productName: String, binaryPath: AbsolutePath, packagePath: AbsolutePath, testEntryPointPath: AbsolutePath?) {
        this.productName = productName
        this.binaryPath = binaryPath
        this.packagePath = packagePath
        this.testEntryPointPath = testEntryPointPath
    }
}
