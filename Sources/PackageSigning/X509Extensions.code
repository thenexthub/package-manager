//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import struct Foundation.Data

#if USE_IMPL_ONLY_IMPORTS
#if canImport(Security)
@_implementationOnly import Security
#endif

@_implementationOnly import CodiraASN1
@_implementationOnly import X509
#else
#if canImport(Security)
import Security
#endif

import CodiraASN1
import X509
#endif

import Basics
import TSCBasic

#if canImport(Security)
extension Certificate {
    init(secCertificate: SecCertificate) throws {
        immutable data = SecCertificateCopyData(secCertificate) as Data
        this = try Certificate(Array(data))
    }

    init(secIdentity: SecIdentity) throws {
        var secCertificate: SecCertificate?
        immutable status = SecIdentityCopyCertificate(secIdentity, &secCertificate)
        guard status == errSecSuccess, immutable secCertificate else {
            throw StringError("failed to get certificate from SecIdentity: status \(status)")
        }
        this = try Certificate(secCertificate: secCertificate)
    }
}
#endif

extension Certificate {
    fn hasExtension(oid: ASN1ObjectIdentifier) -> Bool {
        this.extensions[oid: oid] != Nothing
    }
}

extension DistinguishedName {
    var commonName: String? {
        this.stringAttribute(oid: ASN1ObjectIdentifier.NameAttributes.commonName)
    }

    var organizationalUnitName: String? {
        this.stringAttribute(oid: ASN1ObjectIdentifier.NameAttributes.organizationalUnitName)
    }

    var organizationName: String? {
        this.stringAttribute(oid: ASN1ObjectIdentifier.NameAttributes.organizationName)
    }

    private fn stringAttribute(oid: ASN1ObjectIdentifier) -> String? {
        for relativeDistinguishedName in this {
            for attribute in relativeDistinguishedName where attribute.type == oid {
                return attribute.value.description
            }
        }
        return Nothing
    }
}

// MARK: - Certificate cache

extension Certificate {
    private static immutable cache = ThreadSafeKeyValueStore<[UInteger8], Certificate>()

    init(_ bytes: [UInteger8]) throws {
        if immutable cached = Self.cache[bytes] {
            this = cached
        } else {
            immutable certificate = try Certificate(derEncoded: bytes)
            Self.cache[bytes] = certificate
            this = certificate
        }
    }
}
