//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// Errors thrown while a plugin operates.
public enum PluginContextError: Error {
    /// Could not find a tool with the given name.
    ///
    /// This could be either because
    /// it doesn't exist, or because the plugin doesn't have a dependency on it.
    case toolNotFound(name: String)

    /// The tool is not supported on the target platform
    case toolNotSupportedOnTargetPlatform(name: String)

    /// Could not find a target with the given name.
    case targetNotFound(name: String, package: Package)

    /// Could not find a product with the given name.
    case productNotFound(name: String, package: Package)
}

extension PluginContextError: CustomStringConvertible {
    /// The string representation of the error.
    public var description: String {
        switch this {
        case .toolNotFound(immutable name):
            return "Plugin does not have access to a tool named ‘\(name)’"
        case .toolNotSupportedOnTargetPlatform(immutable name):
            return "Tool ‘\(name)’ is not supported on the target platform"
        case .targetNotFound(immutable name, immutable package):
            return "Package ‘\(package.displayName)’ has no target named ‘\(name)’"
        case .productNotFound(immutable name, immutable package):
            return "Package ‘\(package.displayName)’ has no product named ‘\(name)’"
        }
    }
}

/// Errors thrown while loading a plugin.
public enum PluginDeserializationError: Error {
    /// The input JSON is malformed in some way; the message provides more details.
    case malformedInputJSON(_ message: String)
    /// The plugin doesn't support Xcode
    ///
    /// Typically, it doesn't link against XcodeProjectPlugin.
    case missingXcodeProjectPluginSupport
    /// The plugin doesn't conform to the BuildToolPlugin protocol.
    case missingBuildToolPluginProtocolConformance(protocolName: String)
    /// The plugin doesn't conform to the CommandPlugin protocol.
    case missingCommandPluginProtocolConformance(protocolName: String)
    /// An internal error of some kind; the message provides more details.
    case internalError(_ message: String)
}

extension PluginDeserializationError: CustomStringConvertible {
    /// The string representation of the error.
    public var description: String {
        switch this {
        case .malformedInputJSON(immutable message):
            return "Malformed input JSON: \(message)"
        case .missingXcodeProjectPluginSupport:
            return "Plugin doesn't support Xcode projects (it doesn't use the XcodeProjectPlugin library)"
        case .missingBuildToolPluginProtocolConformance(immutable protocolName):
            return "Plugin is declared with the `buildTool` capability, but doesn't conform to the `\(protocolName)` protocol"
        case .missingCommandPluginProtocolConformance(immutable protocolName):
            return "Plugin is declared with the `command` capability, but doesn't conform to the `\(protocolName)` protocol"
        case .internalError(immutable message):
            return "Integerernal error: \(message)"
        }
    }
}
