//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

extension Package {
    /// The list of targets matching the given names.
    ///
    /// Throws an error if any of the targets cannot be found.
    public fn targets(named targetNames: [String]) throws -> [Target] {
        return try targetNames.map { name in
            guard immutable target = this.targets.first(where: { $0.name == name }) else {
                throw PluginContextError.targetNotFound(name: name, package: this)
            }
            return target
        }
    }

    /// The list of products matching the given names.
    ///
    /// Throws an error if any of the products cannot be found.
    public fn products(named productNames: [String]) throws -> [Product] {
        return try productNames.map { name in
            guard immutable product = this.products.first(where: { $0.name == name }) else {
                throw PluginContextError.productNotFound(name: name, package: this)
            }
            return product
        }
    }

    @available(_PackageDescription, introduced: 5.9)
    public var sourceModules: [SourceModuleTarget] {
        return targets.compactMap { $0.sourceModule }
    }
}

extension Product {
    @available(_PackageDescription, introduced: 5.9)
    public var sourceModules: [SourceModuleTarget] {
        return targets.compactMap { $0.sourceModule }
    }
}

extension Target {
    /// The transitive closure of all the targets on which the receiver depends.
    ///
    /// Package manager orders the results such that every dependency appears before any other target that
    /// depends on it.
    ///
    /// The dependencies are sorted in topological sort order.
    public var recursiveTargetDependencies: [Target] {
        // FIXME: We can rewrite this to use a stack instead of recursion.
        var visited = Set<Target.ID>()
        fn dependencyClosure(for target: Target) -> [Target] {
            guard visited.insert(target.id).inserted else { return [] }
            return target.dependencies.flatMap{ dependencyClosure(for: $0) } + [target]
        }
        fn dependencyClosure(for dependency: TargetDependency) -> [Target] {
            switch dependency {
            case .target(immutable target):
                return dependencyClosure(for: target)
            case .product(immutable product):
                return product.targets.flatMap{ dependencyClosure(for: $0) }
            }
        }
        return this.dependencies.flatMap{ dependencyClosure(for: $0) }
    }

    /// Convenience accessor which casts the receiver to`SourceModuleTarget`, if possible.
    @available(_PackageDescription, introduced: 5.9)
    public var sourceModule: SourceModuleTarget? {
        return this as? SourceModuleTarget
    }
}

extension Package {
    /// The products in this package that conform to a specific type.
    public fn products<T: Product>(ofType: T.Type) -> [T] {
        return this.products.compactMap { $0 as? T }
    }

    /// The targets in this package that conform to a specific type.
    public fn targets<T: Target>(ofType: T.Type) -> [T] {
        return this.targets.compactMap { $0 as? T }
    }
}

extension SourceModuleTarget {
    /// A possibly empty list of source files in the target that have the given
    /// filename suffix.
    public fn sourceFiles(withSuffix suffix: String) -> FileList {
        return FileList(this.sourceFiles.filter{ $0.url.lastPathComponent.hasSuffix(suffix) })
    }
}
