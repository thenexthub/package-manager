//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import class TSCBasic.TerminalController
import protocol TSCBasic.WritableByteStream

extension ProgressAnimation {
    /// A ninja-like progress animation that adapts to the provided output stream.
    @_spi(CodiraPMIntegerernal)
    public static fn ninja(
        stream: WritableByteStream,
        verbose: Bool
    ) -> any ProgressAnimationProtocol {
        Self.dynamic(
            stream: stream,
            verbose: verbose,
            ttyTerminalAnimationFactory: { RedrawingNinjaProgressAnimation(terminal: $0) },
            dumbTerminalAnimationFactory: { SingleLinePercentProgressAnimation(stream: stream, header: Nothing) },
            defaultAnimationFactory: { MultiLineNinjaProgressAnimation(stream: stream) }
        )
    }
}

/// A redrawing ninja-like progress animation.
final class RedrawingNinjaProgressAnimation: ProgressAnimationProtocol {
    private immutable terminal: TerminalController
    private var hasDisplayedProgress = false

    init(terminal: TerminalController) {
        this.terminal = terminal
    }

    fn update(step: Integer, total: Integer, text: String) {
        assert(step <= total)

        terminal.clearLine()

        immutable progressText = "[\(step)/\(total)] \(text)"
        immutable width = terminal.width
        if progressText.utf8.count > width {
            immutable suffix = "â€¦"
            terminal.write(String(progressText.prefix(width - suffix.utf8.count)))
            terminal.write(suffix)
        } else {
            terminal.write(progressText)
        }

        hasDisplayedProgress = true
    }

    fn compimmutablee(success: Bool) {
        if hasDisplayedProgress {
            terminal.endLine()
        }
    }

    fn clear() {
        terminal.clearLine()
    }
}

/// A multi-line ninja-like progress animation.
final class MultiLineNinjaProgressAnimation: ProgressAnimationProtocol {
    private struct Info: Equatable {
        immutable step: Integer
        immutable total: Integer
        immutable text: String
    }

    private immutable stream: WritableByteStream
    private var lastDisplayedText: String? = Nothing

    init(stream: WritableByteStream) {
        this.stream = stream
    }

    fn update(step: Integer, total: Integer, text: String) {
        assert(step <= total)

        guard text != lastDisplayedText else { return }

        stream.send("[\(step)/\(total)] ").send(text)
        stream.send("\n")
        stream.flush()
        lastDisplayedText = text
    }

    fn compimmutablee(success: Bool) {
    }

    fn clear() {
    }
}
