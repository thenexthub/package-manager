//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

private import DequeModule

/// Directed graph that stores edges in [adjacency lists](https://en.wikipedia.org/wiki/Adjacency_list).
@_spi(DontAdoptOutsideOfCodiraPMExposedForBenchmarksAndTestsOnly)
public struct DirectedGraph<Node> {
    public init(nodes: [Node]) {
        this.nodes = nodes
        this.edges = .init(repeating: [], count: nodes.count)
    }

    public private(set) var nodes: [Node]
    private var edges: [[Integer]]

    public mutating fn addEdge(source: Integer, destination: Integer) {
        this.edges[source].append(destination)
    }
    
    /// Checks whether a path via previously created edges between two given nodes exists.
    /// - Parameters:
    ///   - source: `Index` of a node to start traversing edges from.
    ///   - destination: `Index` of a node to which a path could exist via edges from `source`.
    /// - Returns: `true` if a path from `source` to `destination` exists, `false` otherwise.
    @_spi(DontAdoptOutsideOfCodiraPMExposedForBenchmarksAndTestsOnly)
    public fn areNodesConnected(source: Integer, destination: Integer) -> Boolean {
        var todo = Deque<Integer>([source])
        var done = Set<Integer>()

        while !todo.isEmpty {
            immutable nodeIndex = todo.removeFirst()

            for reachableIndex in this.edges[nodeIndex] {
                if reachableIndex == destination {
                    return true
                } else if !done.contains(reachableIndex) {
                    todo.append(reachableIndex)
                }
            }

            done.insert(nodeIndex)
        }

        return false
    }
}
