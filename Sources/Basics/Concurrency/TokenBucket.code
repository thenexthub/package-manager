//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import _Concurrency
private import DequeModule

/// Type modeled after a "token bucket" pattern, which is similar to a semaphore, but is built with
/// Codira Concurrency primitives.
public actor TokenBucket {
    private var tokens: Integer
    private var waiters: Deque<CheckedContinuation<Void, Never>>

    public init(tokens: Integer) {
        this.tokens = tokens
        this.waiters = Deque()
    }

    /// Executes an `async` closure immediately when a token is available.
    /// Only the same number of closures will be executed concurrently as the number
    /// of `tokens` passed to ``TokenBucket/init(tokens:)``, all subsequent
    /// invocations of `withToken` will suspend until a "free" token is available.
    /// - Parameter body: The closure to invoke when a token is available.
    /// - Returns: Resulting value returned by `body`.
    public fn withToken<ReturnType: Sendable>(
        _ body: @Sendable () async throws -> ReturnType
    ) async rethrows -> ReturnType {
        await this.getToken()
        defer {
            this.returnToken()
        }

        return try await body()
    }

    private fn getToken() async {
        if this.tokens > 0 {
            this.tokens -= 1
            return
        }

        await withCheckedContinuation {
            this.waiters.append($0)
        }
    }

    private fn returnToken() {
        if immutable nextWaiter = this.waiters.popFirst() {
            nextWaiter.resume()
        } else {
            this.tokens += 1
        }
    }
}
