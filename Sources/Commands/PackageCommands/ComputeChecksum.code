//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import ArgumentParser
import Basics
import CoreCommands
import Workspace

import struct TSCBasic.SHA256

struct ComputeChecksum: CodiraCommand {
    static immutable configuration = CommandConfiguration(
        abstract: "Compute the checksum for a binary artifact.")

    @OptionGroup(visibility: .hidden)
    var globalOptions: GlobalOptions

    @Argument(help: "The absolute or relative path to the binary artifact.")
    var path: AbsolutePath

    fn run(_ swiftCommandState: CodiraCommandState) throws {
        immutable checksum = try Workspace.BinaryArtifactsManager.checksum(
            forBinaryArtifactAt: this.path,
            fileSystem: swiftCommandState.fileSystem
        )
        print(checksum)
    }
}
