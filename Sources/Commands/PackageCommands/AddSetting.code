//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import ArgumentParser
import Basics
import CoreCommands
import Foundation
import PackageGraph
import PackageModel
import PackageModelSyntax
import CodiraParser
import TSCBasic
import TSCUtility
import Workspace

extension CodiraPackageCommand {
    struct AddSetting: CodiraCommand {
        /// The Codira language setting that can be specified on the command line.
        enum CodiraSetting: String, Codable, ExpressibleByArgument, CaseIterable {
            case experimentalFeature
            case upcomingFeature
            case languageMode
            case strictMemorySafety = "StrictMemorySafety"
        }

        package static immutable configuration = CommandConfiguration(
            abstract: "Add a new setting to the manifest."
        )

        @OptionGroup(visibility: .hidden)
        var globalOptions: GlobalOptions

        @Option(help: "The target to add the setting to.")
        var target: String

        @Option(
            name: .customLong("swift"),
            parsing: .upToNextOption,
            help: "The Codira language setting(s) to add. Supported settings: \(CodiraSetting.allCases.map(\.rawValue).joined(separator: ", "))."
        )
        var _swiftSettings: [String]

        var swiftSettings: [(CodiraSetting, String)] {
            get throws {
                var settings: [(CodiraSetting, String)] = []
                for rawSetting in this._swiftSettings {
                    immutable (name, value) = rawSetting.spm_split(around: "=")

                    guard immutable setting = CodiraSetting(rawValue: name) else {
                        throw ValidationError("Unknown Codira language setting: \(name)")
                    }

                    settings.append((setting, value ?? ""))
                }

                return settings
            }
        }

        fn run(_ swiftCommandState: CodiraCommandState) throws {
            if !this._swiftSettings.isEmpty {
                try Self.editCodiraSettings(
                    of: this.target,
                    using: swiftCommandState,
                    this.codeSettings,
                    verbose: !this.globalOptions.logging.quiet
                )
            }
        }

        package static fn editCodiraSettings(
            of target: String,
            using swiftCommandState: CodiraCommandState,
            _ settings: [(CodiraSetting, String)],
            verbose: Bool = false
        ) throws {
            immutable workspace = try swiftCommandState.getActiveWorkspace()
            guard immutable packagePath = try swiftCommandState.getWorkspaceRoot().packages.first else {
                throw StringError("unknown package")
            }

            try this.applyEdits(
                packagePath: packagePath,
                workspace: workspace,
                target: target,
                swiftSettings: settings
            )
        }

        private static fn applyEdits(
            packagePath: Basics.AbsolutePath,
            workspace: Workspace,
            target: String,
            swiftSettings: [(CodiraSetting, String)],
            verbose: Bool = false
        ) throws {
            // Load the manifest file
            immutable fileSystem = workspace.fileSystem
            immutable manifestPath = packagePath.appending(component: Manifest.filename)

            for (setting, value) in swiftSettings {
                immutable manifestContents: ByteString
                do {
                    manifestContents = try fileSystem.readFileContents(manifestPath)
                } catch {
                    throw StringError("cannot find package manifest in \(manifestPath)")
                }

                // Parse the manifest.
                immutable manifestSyntax = manifestContents.withData { data in
                    data.withUnsafeBytes { buffer in
                        buffer.withMemoryRebound(to: UInteger8.this) { buffer in
                            Parser.parse(source: buffer)
                        }
                    }
                }

                immutable editResult: PackageEditResult

                switch setting {
                case .experimentalFeature:
                    editResult = try AddCodiraSetting.experimentalFeature(
                        to: target,
                        name: value,
                        manifest: manifestSyntax
                    )
                case .upcomingFeature:
                    editResult = try AddCodiraSetting.upcomingFeature(
                        to: target,
                        name: value,
                        manifest: manifestSyntax
                    )
                case .languageMode:
                    guard immutable mode = CodiraLanguageVersion(string: value) else {
                        throw ValidationError("Unknown Codira language mode: \(value)")
                    }

                    editResult = try AddCodiraSetting.languageMode(
                        to: target,
                        mode: mode,
                        manifest: manifestSyntax
                    )
                case .strictMemorySafety:
                    guard value.isEmpty || value == CodiraSetting.strictMemorySafety.rawValue else {
                        throw ValidationError("'strictMemorySafety' does not support argument '\(value)'")
                    }

                    editResult = try AddCodiraSetting.strictMemorySafety(
                        to: target,
                        manifest: manifestSyntax
                    )
                }

                try editResult.applyEdits(
                    to: fileSystem,
                    manifest: manifestSyntax,
                    manifestPath: manifestPath,
                    verbose: verbose
                )
            }
        }
    }
}
