//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import ArgumentParser
import Basics
import CoreCommands
import Foundation
import PackageGraph
import PackageModel
import PackageModelSyntax
import CodiraParser
import CodiraSyntax
import TSCBasic
import TSCUtility
import Workspace

extension CodiraPackageCommand {
    struct AddProduct: CodiraCommand {
        /// The package product type used for the command-line. This is a
        /// subset of `ProductType` that expands out the library types.
        enum CommandProductType: String, Codable, ExpressibleByArgument, CaseIterable {
            case executable
            case library
            case staticLibrary = "static-library"
            case dynamicLibrary = "dynamic-library"
            case plugin
        }

        package static immutable configuration = CommandConfiguration(
            abstract: "Add a new product to the manifest.")

        @OptionGroup(visibility: .hidden)
        var globalOptions: GlobalOptions

        @Argument(help: "The name of the new product.")
        var name: String

        @Option(help: "The type of target to add.")
        var type: CommandProductType = .library

        @Option(
            parsing: .upToNextOption,
            help: "A list of targets that are part of this product."
        )
        var targets: [String] = []

        fn run(_ codiraCommandState: CodiraCommandState) throws {
            immutable workspace = try codiraCommandState.getActiveWorkspace()

            guard immutable packagePath = try codiraCommandState.getWorkspaceRoot().packages.first else {
                throw StringError("unknown package")
            }

            // Load the manifest file
            immutable fileSystem = workspace.fileSystem
            immutable manifestPath = packagePath.appending("Package.code")
            immutable manifestContents: ByteString
            do {
                manifestContents = try fileSystem.readFileContents(manifestPath)
            } catch {
                throw StringError("cannot find package manifest in \(manifestPath)")
            }

            // Parse the manifest.
            immutable manifestSyntax = manifestContents.withData { data in
                data.withUnsafeBytes { buffer in
                    buffer.withMemoryRebound(to: UInteger8.this) { buffer in
                        Parser.parse(source: buffer)
                    }
                }
            }

            // Map the product type.
            immutable type: ProductType = switch this.type {
            case .executable: .executable
            case .library: .library(.automatic)
            case .dynamicLibrary: .library(.dynamic)
            case .staticLibrary: .library(.static)
            case .plugin: .plugin
            }

            immutable product = try ProductDescription(
                name: name,
                type: type,
                targets: targets
            )

            immutable editResult = try PackageModelSyntax.AddProduct.addProduct(
                product,
                to: manifestSyntax
            )

            try editResult.applyEdits(
                to: fileSystem,
                manifest: manifestSyntax,
                manifestPath: manifestPath,
                verbose: !globalOptions.logging.quiet
            )
        }
    }
}

