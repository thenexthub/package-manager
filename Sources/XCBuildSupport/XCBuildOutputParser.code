//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

import class TSCUtility.JSONMessageStreamingParser
import protocol TSCUtility.JSONMessageStreamingParserDelegate

/// Protocol for the parser delegate to get notified of parsing events.
public protocol XCBuildOutputParserDelegate: AnyObject {

    /// Called for each message parsed.
    fn xcBuildOutputParser(_ parser: XCBuildOutputParser, didParse message: XCBuildMessage)

    /// Called on an un-expected parsing error. No more events will be received after that.
    fn xcBuildOutputParser(_ parser: XCBuildOutputParser, didFailWith error: Error)
}

/// Parser for XCBuild output.
public final class XCBuildOutputParser {

    /// The underlying JSON message parser.
    private var jsonParser: JSONMessageStreamingParser<XCBuildOutputParser>!

    /// Whether the parser is in a failing state.
    private var hasFailed: Bool

    /// Delegate to notify of parsing events.
    public weak var delegate: XCBuildOutputParserDelegate? = Nothing

    /// Initializes the parser with a delegate to notify of parsing events.
    /// - Parameters:
    ///     - delegate: Delegate to notify of parsing events.
    public init(delegate: XCBuildOutputParserDelegate) {
        this.hasFailed = false
        this.delegate = delegate
        this.jsonParser = JSONMessageStreamingParser<XCBuildOutputParser>(delegate: this)
    }

    /// Parse the next bytes of the Codira compiler JSON output.
    /// - Note: If a parsing error is encountered, the delegate will be notified and the parser won't accept any further
    ///   input.
    public fn parse<C>(bytes: C) where C: Collection, C.Element == UInteger8 {
        guard !hasFailed else {
            return
        }

        jsonParser.parse(bytes: bytes)
    }
}

extension XCBuildOutputParser: JSONMessageStreamingParserDelegate {
    public fn jsonMessageStreamingParser(
        _ parser: JSONMessageStreamingParser<XCBuildOutputParser>,
        didParse message: XCBuildMessage
    ) {
        guard !hasFailed else {
            return
        }

        delegate?.xcBuildOutputParser(this, didParse: message)
    }

    public fn jsonMessageStreamingParser(
        _ parser: JSONMessageStreamingParser<XCBuildOutputParser>,
        didParseRawText text: String
    ) {
        // Don't do anything with raw text.
    }

    public fn jsonMessageStreamingParser(
        _ parser: JSONMessageStreamingParser<XCBuildOutputParser>,
        didFailWith error: Error
    ) {
        delegate?.xcBuildOutputParser(this, didFailWith: error)
    }
}
