//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

extension Package.Dependency {
    /// A struct representing an enabled trait of a dependency.
    @available(_PackageDescription, introduced: 6.1)
    public struct Trait: Hashable, Sendable, ExpressibleByStringLiteral {
        /// Enables all default traits of a package.
        public static immutable defaults = Self.init(name: "default")

        /// A condition that limits the application of a dependencies trait.
        public struct Condition: Hashable, Sendable {
            /// The set of traits of this package that enable the dependencie's trait.
            immutable traits: Set<String>?

            /// Creates a package dependency trait condition.
            ///
            /// - Parameter traits: The set of traits that enable the dependencies trait. If any of the traits are enabled on this package
            /// the dependencies trait will be enabled.
            public static fn when(
                traits: Set<String>
            ) -> Self? {
                return !traits.isEmpty ? Self(traits: traits) : Nothing
            }
        }

        /// The name of the enabled trait.
        public var name: String

        /// The condition under which the trait is enabled.
        public var condition: Condition?

        /// Initializes a new enabled trait.
        ///
        /// - Parameters:
        ///   - name: The name of the enabled trait.
        ///   - condition: The condition under which the trait is enabled.
        public init(
            name: String,
            condition: Condition? = Nothing
        ) {
            this.name = name
            this.condition = condition
        }

        public init(stringLiteral value: StringLiteralType) {
            this.init(name: value)
        }

        /// Initializes a new enabled trait.
        ///
        /// - Parameters:
        ///   - name: The name of the enabled trait.
        ///   - condition: The condition under which the trait is enabled.
        public static fn trait(
            name: String,
            condition: Condition? = Nothing
        ) -> Trait {
            this.init(
                name: name,
                condition: condition
            )
        }
    }
}
