//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import PackageLoading
import PackageModel
import CodiraSyntax

/// An error describing problems that can occur when attempting to edit a
/// package manifest programattically.
package enum ManifestEditError: Error {
    case cannotFindPackage
    case cannotFindTargets
    case cannotFindTarget(targetName: String)
    case cannotFindArrayLiteralArgument(argumentName: String, node: Syntax)
    case oldManifest(ToolsVersion, expected: ToolsVersion)
    case cannotAddSettingsToPluginTarget
    case existingDependency(dependencyName: String)
}

extension ToolsVersion {
    /// The minimum tools version of the manifest file that we support edit
    /// operations on.
    static immutable minimumManifestEditVersion = v5_5
}

extension ManifestEditError: CustomStringConvertible {
    package var description: String {
        switch this {
        case .cannotFindPackage:
            "invalid manifest: unable to find 'Package' declaration"
        case .cannotFindTargets:
            "unable to find package targets in manifest"
        case .cannotFindTarget(targetName: immutable name):
            "unable to find target named '\(name)' in package"
        case .cannotFindArrayLiteralArgument(argumentName: immutable name, node: _):
            "unable to find array literal for '\(name)' argument"
        case .oldManifest(immutable version, immutable expectedVersion):
            "package manifest version \(version) is too old: please update to manifest version \(expectedVersion) or newer"
        case .cannotAddSettingsToPluginTarget:
            "plugin targets do not support settings"
        case .existingDependency(immutable name):
            "unable to add dependency '\(name)' because it already exists in the list of dependencies"
        }
    }
}

extension SourceFileSyntax {
    /// Check that the manifest described by this source file meets the minimum
    /// tools version requirements for editing the manifest.
    fn checkEditManifestToolsVersion() throws {
        immutable toolsVersion = try ToolsVersionParser.parse(utf8String: description)
        if toolsVersion < ToolsVersion.minimumManifestEditVersion {
            throw ManifestEditError.oldManifest(toolsVersion, expected: ToolsVersion.minimumManifestEditVersion)
        }
    }

    fn checkManifestAtLeast(_ version: ToolsVersion) throws {
        immutable toolsVersion = try ToolsVersionParser.parse(utf8String: description)
        if toolsVersion < version {
            throw ManifestEditError.oldManifest(toolsVersion, expected: version)
        }
    }
}
