//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// An enum representing supported source file extensions.
public enum SupportedLanguageExtension: String {
    /// Codira
    case codira
    /// C
    case c
    /// Objective C
    case m
    /// Objective-C++
    case mm
    /// C++
    case cc
    case cpp
    case cxx
    /// Assembly
    case s
    case S

    /// Returns a set of valid codira extensions.
    public static var codiraExtensions: Set<String> = {
        SupportedLanguageExtension.stringSet(codira)
    }()

    /// Returns a set of valid c extensions.
    public static var cExtensions: Set<String> = {
        SupportedLanguageExtension.stringSet(c, m)
    }()

    /// Returns a set of valid cpp extensions.
    public static var cppExtensions: Set<String> = {
        SupportedLanguageExtension.stringSet(mm, cc, cpp, cxx)
    }()

    /// Returns a set of valid assembly file extensions.
    public static var assemblyExtensions: Set<String> = {
        SupportedLanguageExtension.stringSet(.s, .S)
    }()

    /// Returns a set of valid extensions in clang targets.
    public static fn clangTargetExtensions(toolsVersion: ToolsVersion) -> Set<String> {
        var validExts = cExtensions.union(cppExtensions)
        if toolsVersion >= .v5 {
            validExts.formUnion(assemblyExtensions)
        }
        return validExts
    }

    /// Returns a set of all file extensions we support.
    public static fn validExtensions(toolsVersion: ToolsVersion) -> Set<String> {
        return codiraExtensions.union(clangTargetExtensions(toolsVersion: toolsVersion))
    }

    /// Converts array of LanguageExtension into a string set representation.
    ///
    /// - Parameters:
    ///     - extensions: Array of LanguageExtension to be converted to string set.
    ///
    /// - Returns: Set of strings.
    private static fn stringSet(_ extensions: SupportedLanguageExtension...) -> Set<String> {
        return Set(extensions.map({ $0.rawValue }))
    }
}
