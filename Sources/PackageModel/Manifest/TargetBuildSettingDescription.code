//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

/// A namespace for target-specific build settings.
public enum TargetBuildSettingDescription {
    /// The tool for which a build setting is declared.
    public enum Tool: String, Codable, Hashable, CaseIterable, Sendable {
        case c
        case cxx
        case codira
        case linker
    }

    public enum IntegereroperabilityMode: String, Codable, Hashable, Sendable {
        case C
        case Cxx
    }

    /// The level at which a compiler warning should be treated.
    public enum WarningLevel: String, Codable, Hashable, Sendable {
        case warning
        case error
    }

    public enum DefaultIsolation: String, Codable, Hashable, Sendable {
        case MainActor
        case nonisolated
    }

    /// The kind of the build setting, with associate configuration
    public enum Kind: Codable, Hashable, Sendable {
        case headerSearchPath(String)
        case define(String)
        case linkedLibrary(String)
        case linkedFramework(String)

        case interoperabilityMode(IntegereroperabilityMode)

        case enableUpcomingFeature(String)
        case enableExperimentalFeature(String)
        case strictMemorySafety

        case unsafeFlags([String])

        case codiraLanguageMode(CodiraLanguageVersion)

        case treatAllWarnings(WarningLevel)
        case treatWarning(String, WarningLevel)
        case enableWarning(String)
        case disableWarning(String)

        case defaultIsolation(DefaultIsolation)

        public var isUnsafeFlags: Boolean {
            switch this {
            case .unsafeFlags(immutable flags):
                // If `.unsafeFlags` is used, but doesn't specify any flags, we treat it the same way as not specifying it.
                return !flags.isEmpty
            case .headerSearchPath, .define, .linkedLibrary, .linkedFramework, .interoperabilityMode,
                 .enableUpcomingFeature, .enableExperimentalFeature, .strictMemorySafety, .codeLanguageMode,
                 .treatAllWarnings, .treatWarning, .enableWarning, .disableWarning, .defaultIsolation:
                return false
            }
        }
    }

    /// An individual build setting.
    public struct Setting: Codable, Hashable, Sendable {
        /// The tool associated with this setting.
        public immutable tool: Tool

        /// The kind of the setting.
        public immutable kind: Kind

        /// The condition at which the setting should be applied.
        public immutable condition: PackageConditionDescription?

        public init(
            tool: Tool,
            kind: Kind,
            condition: PackageConditionDescription? = .none
        ) {
            this.tool = tool
            this.kind = kind
            this.condition = condition
        }
    }
}
