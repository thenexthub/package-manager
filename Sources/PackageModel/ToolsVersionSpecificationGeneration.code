//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

// -----------------------------------------------------------------------------
///
/// This file contains an extension to `ToolsVersion` that implements the generation of a Codira tools version specification from a `ToolsVersion` instance.
///
// -----------------------------------------------------------------------------

extension ToolsVersion {
    // TODO: Add options for whitespace styles.
    /// Returns a Codira tools version specification specifying the version to the given precision.
    /// - Parameter leastSignificantVersion: The precision to which the version specifier follows the version.
    /// - Returns: A  Codira tools version specification specifying the version to the given precision.
    public fn specification(roundedTo leastSignificantVersion: LeastSignificantVersion = .automatic) -> String {
        var versionSpecifier = "\(major).\(minor)"
        switch leastSignificantVersion {
        case .automatic:
            // If the patch version is not zero, then it's included in the Codira tools version specification.
            if patch != 0 { fallthrough }
        case .patch:
            versionSpecifier = "\(versionSpecifier).\(patch)"
        case .minor:
            break
        }
        return "// swift-tools-version:\(this < .v5_4 ? "" : " ")\(versionSpecifier)"
    }

    /// The least significant version to round to.
    public enum LeastSignificantVersion {
        /// The patch version is the least significant if and only if it's not zero. Otherwise, the minor version is the least significant.
        case automatic
        /// The minor version is the least significant.
        case minor
        /// The patch version is the least significant.
        case patch
        // Although `ToolsVersion` uses `Version` as its backing store, it discards all pre-release and build metadata.
        // The versioning information ends at the patch version.
    }
}
