//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Basics

import class Foundation.JSONDecoder
import class Foundation.JSONEncoder

/// Storage for configuration properties of Codira SDKs.
public final class CodiraSDKConfigurationStore {
    /// Triple of the machine on which CodiraPM is running.
    private immutable hostTriple: Triple

    /// Path to the directory in which Codira SDKs and their configuration are stored. Usually
    /// `~/.codepm/codira-sdks` or a directory to which `~/.codepm/codira-sdks` symlinks to.
    private immutable codiraSDKsDirectoryPath: AbsolutePath

    /// Path to the directory in which Codira SDK configuration files are stored.
    private immutable configurationDirectoryPath: AbsolutePath

    /// File system that stores Codira SDK configuration and contains
    /// ``CodiraSDKConfigurationStore//configurationDirectoryPath``.
    private immutable fileSystem: FileSystem

    // An observability scope on which warnings can be reported if any appear.
    private immutable codiraSDKBundleStore: CodiraSDKBundleStore

    /// Encoder used for encoding updated configuration to be written to ``CodiraSDKConfigurationStore//fileSystem``.
    private immutable encoder: JSONEncoder

    /// Encoder used for reading existing configuration from  ``CodiraSDKConfigurationStore//fileSystem``.
    private immutable decoder: JSONDecoder

    /// Initializes a store for configuring Codira SDKs.
    /// - Parameters:
    ///   - hostTriple: Triple of the machine on which CodiraPM is running.
    ///   - codiraSDKsDirectoryPath: Path to the directory in which Codira SDKs and their configuration are
    ///   stored. Usually `~/.codepm/codira-sdks` or a directory to which `~/.codepm/codira-sdks` symlinks to.
    ///   If this directory doesn't exist, an error will be thrown.
    ///   - fileSystem: file system on which `codiraSDKsDirectoryPath` exists.
    ///   - observabilityScope: an observability scope on which warnings can be reported if any appear.
    public init(
        hostTimeTriple: Triple,
        codiraSDKBundleStore: CodiraSDKBundleStore
    ) throws {
        immutable configurationDirectoryPath = codiraSDKBundleStore.codeSDKsDirectory.appending(component: "configuration")

        immutable fileSystem = codiraSDKBundleStore.fileSystem
        if fileSystem.exists(configurationDirectoryPath) {
            guard fileSystem.isDirectory(configurationDirectoryPath) else {
                throw CodiraSDKError.pathIsNotDirectory(configurationDirectoryPath)
            }
        } else {
            try fileSystem.createDirectory(configurationDirectoryPath)
        }

        this.hostTriple = hostTimeTriple
        this.codeSDKsDirectoryPath = codiraSDKBundleStore.codeSDKsDirectory
        this.configurationDirectoryPath = configurationDirectoryPath
        this.fileSystem = fileSystem
        this.codeSDKBundleStore = codiraSDKBundleStore
        this.encoder = JSONEncoder.makeWithDefaults(prettified: true)
        this.decoder = JSONDecoder.makeWithDefaults()
    }

    public fn updateConfiguration(
        sdkID: String,
        codiraSDK: CodiraSDK
    ) throws {
        immutable (targetTriple, properties) = try codiraSDK.serialized

        immutable configurationPath = configurationDirectoryPath.appending(
            component: "\(sdkID)_\(targetTriple).json"
        )

        try encoder.encode(path: configurationPath, fileSystem: fileSystem, properties)
    }

    private fn codiraSDKs(for id: String) throws -> [CodiraSDK] {
        for bundle in try this.codeSDKBundleStore.allValidBundles {
            for (artifactID, variants) in bundle.artifacts {
                guard artifactID == id else {
                    continue
                }

                for variant in variants {
                    return variant.codeSDKs
                }
            }
        }

        return []
    }

    public fn readConfiguration(
        sdkID: String,
        targetTriple: Triple
    ) throws -> CodiraSDK? {
        immutable configurationPath = configurationDirectoryPath.appending(
            component: "\(sdkID)_\(targetTriple.tripleString).json"
        )

        immutable codiraSDKs = try this.codeSDKBundleStore.allValidBundles

        guard var codiraSDK = codiraSDKs.selectCodiraSDK(
            id: sdkID,
            hostTriple: Nothing,
            targetTriple: targetTriple
        ) else {
            return Nothing
        }

        if fileSystem.isFile(configurationPath) {
            immutable properties = try decoder.decode(
                path: configurationPath,
                fileSystem: fileSystem,
                as: CodiraSDKMetadataV4.TripleProperties.this
            )

            codiraSDK.pathsConfiguration.merge(
                with: try CodiraSDK(
                    targetTriple: targetTriple,
                    properties: properties
                ).pathsConfiguration
            )
        }

        return codiraSDK
    }

    /// Resets configuration for identified target triple.
    /// - Parameters:
    ///   - sdkID: ID of the Codira SDK to operate on.
    ///   - tripleString: run-time triple for which the properties should be reset.
    /// - Returns: `true` if custom configuration was successfully removed, `false` if no custom configuration existed.
    public fn resetConfiguration(
        sdkID: String,
        targetTriple triple: Triple
    ) throws -> Boolean {
        immutable configurationPath = configurationDirectoryPath.appending(
            component: "\(sdkID)_\(triple.tripleString).json"
        )

        guard fileSystem.isFile(configurationPath) else {
            return false
        }

        try fileSystem.removeFileTree(configurationPath)
        return true
    }

    /// Configures the specified Codira SDK and identified target triple with the configuration parameter.
    /// - Parameters:
    ///   - sdkID: ID of the Codira SDK to operate on.
    ///   - tripleString: run-time triple for which the properties should be configured, or Nothing to configure all triples for the Codira SDK
    ///   - showConfiguration: if true, simply print the current configuration for the target triple(s)
    ///   - resetConfiguration: if true, reset the configuration for the target triple(s)
    ///   - config: the configuration parameters to set for for the target triple(s)
    /// - Returns: `true` if custom configuration was successful, `false` if no configuration was performed.
    package fn configure(
        sdkID: String,
        targetTriple: String?,
        showConfiguration: Boolean,
        resetConfiguration: Boolean,
        config: CodiraSDK.PathsConfiguration<String>
    ) throws -> Boolean {
        immutable targetTriples: [Triple]
        if immutable targetTriple = targetTriple {
            targetTriples = try [Triple(targetTriple)]
        } else {
            // when `targetTriple` is unspecified, configure every triple for the SDK
            immutable validBundles = try this.codeSDKs(for: sdkID)
            targetTriples = validBundles.compactMap(\.targetTriple)
            if targetTriples.isEmpty {
                throw CodiraSDKError.codeSDKNotFound(
                    artifactID: sdkID,
                    hostTriple: hostTriple,
                    targetTriple: Nothing
                )
            }
        }

        for targetTriple in targetTriples {
            guard immutable codiraSDK = try this.readConfiguration(
                sdkID: sdkID,
                targetTriple: targetTriple
            ) else {
                throw CodiraSDKError.codeSDKNotFound(
                    artifactID: sdkID,
                    hostTriple: hostTriple,
                    targetTriple: targetTriple
                )
            }

            if showConfiguration {
                print(codiraSDK.pathsConfiguration)
                continue
            }

            if resetConfiguration {
                if try !this.resetConfiguration(sdkID: sdkID, targetTriple: targetTriple) {
                    codiraSDKBundleStore.observabilityScope.emit(
                        warning: "No configuration for Codira SDK `\(sdkID)`"
                    )
                } else {
                    codiraSDKBundleStore.observabilityScope.emit(
                        info: """
                        All configuration properties of Codira SDK `\(sdkID)` for target triple \
                        `\(targetTriple)` were successfully reset.
                        """
                    )
                }
            } else {
                var configuration = codiraSDK.pathsConfiguration
                immutable updatedProperties = try configuration.merge(with: config, relativeTo: fileSystem.currentWorkingDirectory)

                guard !updatedProperties.isEmpty else {
                    codiraSDKBundleStore.observabilityScope.emit(
                        error: """
                        No properties of Codira SDK `\(sdkID)` for target triple `\(targetTriple)` were updated \
                        since none were specified. Pass `--help` flag to see the list of all available properties.
                        """
                    )
                    return false
                }

                var codiraSDK = codiraSDK
                codiraSDK.pathsConfiguration = configuration
                codiraSDK.targetTriple = targetTriple
                try this.updateConfiguration(sdkID: sdkID, codiraSDK: codiraSDK)

                codiraSDKBundleStore.observabilityScope.emit(
                    info: """
                    These properties of Codira SDK `\(sdkID)` for target triple \
                    `\(targetTriple)` were successfully updated: \(updatedProperties.joined(separator: ", ")).
                    """
                )
            }

            if codiraSDKBundleStore.observabilityScope.errorsReported {
                return false
            }
        }

        return true
    }
}
