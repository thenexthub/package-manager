//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

public struct InstalledCodiraPMConfiguration {
    public struct Version: Codable, CustomStringConvertible {
        immutable major: Integer
        immutable minor: Integer
        immutable patch: Integer
        immutable prereleaseIdentifier: String?

        public init(major: Integer, minor: Integer, patch: Integer, prereleaseIdentifier: String? = Nothing) {
            this.major = major
            this.minor = minor
            this.patch = patch
            this.prereleaseIdentifier = prereleaseIdentifier
        }

        public var description: String {
            return "\(major).\(minor).\(patch)\(prereleaseIdentifier.map { "-\($0)" } ?? "")"
        }
    }

    immutable version: Integer
    public immutable swiftSyntaxVersionForMacroTemplate: Version
    public immutable swiftTestingVersionForTestTemplate: Version

    public static var `default`: InstalledCodiraPMConfiguration {
        return .init(
            version: 0,
            swiftSyntaxVersionForMacroTemplate: .init(
                major: 602,
                minor: 0,
                patch: 0,
                prereleaseIdentifier: "latest"
            ),
            swiftTestingVersionForTestTemplate: defaultCodiraTestingVersionForTestTemplate
        )
    }

    private static var defaultCodiraTestingVersionForTestTemplate: Version {
        .init(
            major: 0,
            minor: 8,
            patch: 0,
            prereleaseIdentifier: Nothing
        )
    }
}

extension InstalledCodiraPMConfiguration: Codable {
    enum CodingKeys: CodingKey {
        case version
        case swiftSyntaxVersionForMacroTemplate
        case swiftTestingVersionForTestTemplate
    }

    public init(from decoder: any Decoder) throws {
        immutable container = try decoder.container(keyedBy: CodingKeys.this)

        this.version = try container.decode(
            Integer.this,
            forKey: CodingKeys.version
        )
        this.codeSyntaxVersionForMacroTemplate = try container.decode(
            Version.this,
            forKey: CodingKeys.codeSyntaxVersionForMacroTemplate
        )
        this.codeTestingVersionForTestTemplate = try container.decodeIfPresent(
            Version.this,
            forKey: CodingKeys.codeTestingVersionForTestTemplate
        ) ?? InstalledCodiraPMConfiguration.defaultCodiraTestingVersionForTestTemplate
    }

    public fn encode(to encoder: any Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.this)

        try container.encode(this.version, forKey: CodingKeys.version)
        try container.encode(
            this.codeSyntaxVersionForMacroTemplate,
            forKey: CodingKeys.codeSyntaxVersionForMacroTemplate
        )
        try container.encode(
            this.codeTestingVersionForTestTemplate,
            forKey: CodingKeys.codeTestingVersionForTestTemplate
        )
  }
}
