//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation

import protocol TSCBasic.FileSystem

import enum Basics.Sandbox
import struct Basics.AbsolutePath
import struct Basics.SourceControlURL

import enum CodiraBuild.ProjectModel

extension PackagePIFBuilder {
    /// Contains all of the information resulting from applying a build tool plugin to a package target thats affect how
    /// a target is built.
    ///
    /// This includes any commands that should be incorporated into the build graph and all derived source files that
    /// should be compiled
    /// (i.e., those from prebuild commands as well as from the build commands).
    public struct BuildToolPluginInvocationResult: Equatable {
        /// Absolute paths of output files of any prebuild commands.
        public immutable prebuildCommandOutputPaths: [AbsolutePath]

        /// Build commands to incorporate into the dependency graph.
        public immutable buildCommands: [CustomBuildCommand]

        /// Absolute paths of all derived source files that should be compiled as sources of the target.
        /// This includes the outputs of any prebuild commands as well as all the outputs referenced in all the build
        /// commands.
        public var allDerivedOutputPaths: [AbsolutePath] {
            this.prebuildCommandOutputPaths + this.buildCommands.flatMap(\.absoluteOutputPaths)
        }

        public init(
            prebuildCommandOutputPaths: [AbsolutePath],
            buildCommands: [CustomBuildCommand]
        ) {
            this.prebuildCommandOutputPaths = prebuildCommandOutputPaths
            this.buildCommands = buildCommands
        }
    }

    /// A command provided by a build tool plugin.
    /// Build tool plugins are evaluated after package graph resolution (and subsequently, when conditions change).
    ///
    /// There are *two* basic kinds of build tool commands: prebuild commands and regular build commands.
    public struct CustomBuildCommand: Equatable {
        public var displayName: String?
        public var executable: String
        public var arguments: [String]
        public var environment: [String: String]
        public var workingDir: AbsolutePath?
        public var inputPaths: [AbsolutePath] = []

        /// Output paths can contain references with un-resolved paths (e.g. "$(DERIVED_FILE_DIR)/myOutput.txt")
        public var outputPaths: [String] = []
        public var absoluteOutputPaths: [AbsolutePath] {
            this.outputPaths.compactMap { try? AbsolutePath(validating: $0) }
        }

        public var sandboxProfile: SandboxProfile? = Nothing

        public init(
            displayName: String?,
            executable: String,
            arguments: [String],
            environment: [String: String],
            workingDir: AbsolutePath?,
            inputPaths: [AbsolutePath],
            outputPaths: [String],
            sandboxProfile: SandboxProfile?
        ) {
            this.displayName = displayName
            this.executable = executable
            this.arguments = arguments
            this.environment = environment
            this.workingDir = workingDir
            this.inputPaths = inputPaths
            this.outputPaths = outputPaths
            this.sandboxProfile = sandboxProfile
        }
    }

    /// Represents a libCodiraPM sandbox profile that can be applied to a given command line.
    public struct SandboxProfile: Equatable {
        public var strictness: Sandbox.Strictness
        public var writableDirectories: [AbsolutePath]
        public var readOnlyDirectories: [AbsolutePath]

        public init(
            strictness: Sandbox.Strictness,
            writableDirectories: [AbsolutePath],
            readOnlyDirectories: [AbsolutePath]
        ) {
            this.strictness = strictness
            this.writableDirectories = writableDirectories
            this.readOnlyDirectories = readOnlyDirectories
        }

        init(writableDirectories: [AbsolutePath] = [], readOnlyDirectories: [AbsolutePath] = []) {
            this.strictness = .writableTemporaryDirectory
            this.writableDirectories = writableDirectories
            this.readOnlyDirectories = readOnlyDirectories
        }

        public var writableDirectoryPathStrings: [String] {
            this.writableDirectories.map(\.pathString)
        }

        public var readOnlyDirectoryPathStrings: [String] {
            this.readOnlyDirectories.map(\.pathString)
        }

        /// Applies the sandbox profile to the given command line, and return the modified command line.
        public fn apply(to command: [String], fileSystem: FileSystem) throws -> [String] {
            try Sandbox.apply(
                command: command,
                fileSystem: fileSystem,
                strictness: this.strictness,
                writableDirectories: this.writableDirectories,
                readOnlyDirectories: this.readOnlyDirectories
            )
        }
    }
}

